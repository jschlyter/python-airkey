# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LockFirmware(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applet_version': 'str',
        'pic_version': 'str',
        'motor_pic_version': 'str'
    }

    attribute_map = {
        'applet_version': 'appletVersion',
        'pic_version': 'picVersion',
        'motor_pic_version': 'motorPicVersion'
    }

    def __init__(self, applet_version=None, pic_version=None, motor_pic_version=None):  # noqa: E501
        """LockFirmware - a model defined in Swagger"""  # noqa: E501
        self._applet_version = None
        self._pic_version = None
        self._motor_pic_version = None
        self.discriminator = None
        if applet_version is not None:
            self.applet_version = applet_version
        if pic_version is not None:
            self.pic_version = pic_version
        if motor_pic_version is not None:
            self.motor_pic_version = motor_pic_version

    @property
    def applet_version(self):
        """Gets the applet_version of this LockFirmware.  # noqa: E501

        Current version of applet  # noqa: E501

        :return: The applet_version of this LockFirmware.  # noqa: E501
        :rtype: str
        """
        return self._applet_version

    @applet_version.setter
    def applet_version(self, applet_version):
        """Sets the applet_version of this LockFirmware.

        Current version of applet  # noqa: E501

        :param applet_version: The applet_version of this LockFirmware.  # noqa: E501
        :type: str
        """

        self._applet_version = applet_version

    @property
    def pic_version(self):
        """Gets the pic_version of this LockFirmware.  # noqa: E501

        Current version of pic  # noqa: E501

        :return: The pic_version of this LockFirmware.  # noqa: E501
        :rtype: str
        """
        return self._pic_version

    @pic_version.setter
    def pic_version(self, pic_version):
        """Sets the pic_version of this LockFirmware.

        Current version of pic  # noqa: E501

        :param pic_version: The pic_version of this LockFirmware.  # noqa: E501
        :type: str
        """

        self._pic_version = pic_version

    @property
    def motor_pic_version(self):
        """Gets the motor_pic_version of this LockFirmware.  # noqa: E501

        Current version of motor pic  # noqa: E501

        :return: The motor_pic_version of this LockFirmware.  # noqa: E501
        :rtype: str
        """
        return self._motor_pic_version

    @motor_pic_version.setter
    def motor_pic_version(self, motor_pic_version):
        """Sets the motor_pic_version of this LockFirmware.

        Current version of motor pic  # noqa: E501

        :param motor_pic_version: The motor_pic_version of this LockFirmware.  # noqa: E501
        :type: str
        """

        self._motor_pic_version = motor_pic_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LockFirmware, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LockFirmware):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
