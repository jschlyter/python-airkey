# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_maintenance_mode': 'bool',
        'medium_log_visible': 'bool',
        'pin_set': 'bool',
        'pin_reset_time': 'str'
    }

    attribute_map = {
        'in_maintenance_mode': 'inMaintenanceMode',
        'medium_log_visible': 'mediumLogVisible',
        'pin_set': 'pinSet',
        'pin_reset_time': 'pinResetTime'
    }

    def __init__(self, in_maintenance_mode=None, medium_log_visible=None, pin_set=None, pin_reset_time=None):  # noqa: E501
        """PhoneSettings - a model defined in Swagger"""  # noqa: E501
        self._in_maintenance_mode = None
        self._medium_log_visible = None
        self._pin_set = None
        self._pin_reset_time = None
        self.discriminator = None
        self.in_maintenance_mode = in_maintenance_mode
        self.medium_log_visible = medium_log_visible
        if pin_set is not None:
            self.pin_set = pin_set
        if pin_reset_time is not None:
            self.pin_reset_time = pin_reset_time

    @property
    def in_maintenance_mode(self):
        """Gets the in_maintenance_mode of this PhoneSettings.  # noqa: E501

        In maintenance mode or not  # noqa: E501

        :return: The in_maintenance_mode of this PhoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._in_maintenance_mode

    @in_maintenance_mode.setter
    def in_maintenance_mode(self, in_maintenance_mode):
        """Sets the in_maintenance_mode of this PhoneSettings.

        In maintenance mode or not  # noqa: E501

        :param in_maintenance_mode: The in_maintenance_mode of this PhoneSettings.  # noqa: E501
        :type: bool
        """
        if in_maintenance_mode is None:
            raise ValueError("Invalid value for `in_maintenance_mode`, must not be `None`")  # noqa: E501

        self._in_maintenance_mode = in_maintenance_mode

    @property
    def medium_log_visible(self):
        """Gets the medium_log_visible of this PhoneSettings.  # noqa: E501

        Log of the medium is visible or not  # noqa: E501

        :return: The medium_log_visible of this PhoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._medium_log_visible

    @medium_log_visible.setter
    def medium_log_visible(self, medium_log_visible):
        """Sets the medium_log_visible of this PhoneSettings.

        Log of the medium is visible or not  # noqa: E501

        :param medium_log_visible: The medium_log_visible of this PhoneSettings.  # noqa: E501
        :type: bool
        """
        if medium_log_visible is None:
            raise ValueError("Invalid value for `medium_log_visible`, must not be `None`")  # noqa: E501

        self._medium_log_visible = medium_log_visible

    @property
    def pin_set(self):
        """Gets the pin_set of this PhoneSettings.  # noqa: E501

        Pin is set or not  # noqa: E501

        :return: The pin_set of this PhoneSettings.  # noqa: E501
        :rtype: bool
        """
        return self._pin_set

    @pin_set.setter
    def pin_set(self, pin_set):
        """Sets the pin_set of this PhoneSettings.

        Pin is set or not  # noqa: E501

        :param pin_set: The pin_set of this PhoneSettings.  # noqa: E501
        :type: bool
        """

        self._pin_set = pin_set

    @property
    def pin_reset_time(self):
        """Gets the pin_reset_time of this PhoneSettings.  # noqa: E501

        Timestamp of PIN reset (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :return: The pin_reset_time of this PhoneSettings.  # noqa: E501
        :rtype: str
        """
        return self._pin_reset_time

    @pin_reset_time.setter
    def pin_reset_time(self, pin_reset_time):
        """Sets the pin_reset_time of this PhoneSettings.

        Timestamp of PIN reset (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :param pin_reset_time: The pin_reset_time of this PhoneSettings.  # noqa: E501
        :type: str
        """

        self._pin_reset_time = pin_reset_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
