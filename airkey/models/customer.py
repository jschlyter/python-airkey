# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Customer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_control_system_name': 'str',
        'customer_number': 'str',
        'created_on': 'str',
        'contact_title': 'str',
        'customer_name': 'str',
        'contact_person': 'str',
        'address_street': 'str',
        'address_post_code': 'str',
        'address_city': 'str',
        'address_country_code': 'str',
        'contact_phone_number': 'str',
        'contact_email_address': 'str',
        'fax': 'str',
        'correspondence_language_code': 'str'
    }

    attribute_map = {
        'access_control_system_name': 'accessControlSystemName',
        'customer_number': 'customerNumber',
        'created_on': 'createdOn',
        'contact_title': 'contactTitle',
        'customer_name': 'customerName',
        'contact_person': 'contactPerson',
        'address_street': 'addressStreet',
        'address_post_code': 'addressPostCode',
        'address_city': 'addressCity',
        'address_country_code': 'addressCountryCode',
        'contact_phone_number': 'contactPhoneNumber',
        'contact_email_address': 'contactEmailAddress',
        'fax': 'fax',
        'correspondence_language_code': 'correspondenceLanguageCode'
    }

    def __init__(self, access_control_system_name=None, customer_number=None, created_on=None, contact_title=None, customer_name=None, contact_person=None, address_street=None, address_post_code=None, address_city=None, address_country_code=None, contact_phone_number=None, contact_email_address=None, fax=None, correspondence_language_code=None):  # noqa: E501
        """Customer - a model defined in Swagger"""  # noqa: E501
        self._access_control_system_name = None
        self._customer_number = None
        self._created_on = None
        self._contact_title = None
        self._customer_name = None
        self._contact_person = None
        self._address_street = None
        self._address_post_code = None
        self._address_city = None
        self._address_country_code = None
        self._contact_phone_number = None
        self._contact_email_address = None
        self._fax = None
        self._correspondence_language_code = None
        self.discriminator = None
        if access_control_system_name is not None:
            self.access_control_system_name = access_control_system_name
        if customer_number is not None:
            self.customer_number = customer_number
        if created_on is not None:
            self.created_on = created_on
        if contact_title is not None:
            self.contact_title = contact_title
        if customer_name is not None:
            self.customer_name = customer_name
        if contact_person is not None:
            self.contact_person = contact_person
        if address_street is not None:
            self.address_street = address_street
        if address_post_code is not None:
            self.address_post_code = address_post_code
        if address_city is not None:
            self.address_city = address_city
        if address_country_code is not None:
            self.address_country_code = address_country_code
        if contact_phone_number is not None:
            self.contact_phone_number = contact_phone_number
        if contact_email_address is not None:
            self.contact_email_address = contact_email_address
        if fax is not None:
            self.fax = fax
        if correspondence_language_code is not None:
            self.correspondence_language_code = correspondence_language_code

    @property
    def access_control_system_name(self):
        """Gets the access_control_system_name of this Customer.  # noqa: E501

        Name of the access control system  # noqa: E501

        :return: The access_control_system_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._access_control_system_name

    @access_control_system_name.setter
    def access_control_system_name(self, access_control_system_name):
        """Sets the access_control_system_name of this Customer.

        Name of the access control system  # noqa: E501

        :param access_control_system_name: The access_control_system_name of this Customer.  # noqa: E501
        :type: str
        """

        self._access_control_system_name = access_control_system_name

    @property
    def customer_number(self):
        """Gets the customer_number of this Customer.  # noqa: E501

        Customer number associated with the access control system  # noqa: E501

        :return: The customer_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._customer_number

    @customer_number.setter
    def customer_number(self, customer_number):
        """Sets the customer_number of this Customer.

        Customer number associated with the access control system  # noqa: E501

        :param customer_number: The customer_number of this Customer.  # noqa: E501
        :type: str
        """

        self._customer_number = customer_number

    @property
    def created_on(self):
        """Gets the created_on of this Customer.  # noqa: E501

        Date when the customer was created (ISO 8601-format compliant date: yyyy-mm-dd)  # noqa: E501

        :return: The created_on of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Customer.

        Date when the customer was created (ISO 8601-format compliant date: yyyy-mm-dd)  # noqa: E501

        :param created_on: The created_on of this Customer.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def contact_title(self):
        """Gets the contact_title of this Customer.  # noqa: E501

        Title of contact person  # noqa: E501

        :return: The contact_title of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._contact_title

    @contact_title.setter
    def contact_title(self, contact_title):
        """Sets the contact_title of this Customer.

        Title of contact person  # noqa: E501

        :param contact_title: The contact_title of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["MR", "MS"]  # noqa: E501
        if contact_title not in allowed_values:
            raise ValueError(
                "Invalid value for `contact_title` ({0}), must be one of {1}"  # noqa: E501
                .format(contact_title, allowed_values)
            )

        self._contact_title = contact_title

    @property
    def customer_name(self):
        """Gets the customer_name of this Customer.  # noqa: E501

        Name of customer (in case of a company it is the company name, otherwise the name of the private customer)  # noqa: E501

        :return: The customer_name of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this Customer.

        Name of customer (in case of a company it is the company name, otherwise the name of the private customer)  # noqa: E501

        :param customer_name: The customer_name of this Customer.  # noqa: E501
        :type: str
        """

        self._customer_name = customer_name

    @property
    def contact_person(self):
        """Gets the contact_person of this Customer.  # noqa: E501

        Contact person of the access control system  # noqa: E501

        :return: The contact_person of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this Customer.

        Contact person of the access control system  # noqa: E501

        :param contact_person: The contact_person of this Customer.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def address_street(self):
        """Gets the address_street of this Customer.  # noqa: E501

        Street as part of the customer's address  # noqa: E501

        :return: The address_street of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._address_street

    @address_street.setter
    def address_street(self, address_street):
        """Sets the address_street of this Customer.

        Street as part of the customer's address  # noqa: E501

        :param address_street: The address_street of this Customer.  # noqa: E501
        :type: str
        """

        self._address_street = address_street

    @property
    def address_post_code(self):
        """Gets the address_post_code of this Customer.  # noqa: E501

        Postal code as part of the customer's address  # noqa: E501

        :return: The address_post_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._address_post_code

    @address_post_code.setter
    def address_post_code(self, address_post_code):
        """Sets the address_post_code of this Customer.

        Postal code as part of the customer's address  # noqa: E501

        :param address_post_code: The address_post_code of this Customer.  # noqa: E501
        :type: str
        """

        self._address_post_code = address_post_code

    @property
    def address_city(self):
        """Gets the address_city of this Customer.  # noqa: E501

        City as part of the customer's address  # noqa: E501

        :return: The address_city of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._address_city

    @address_city.setter
    def address_city(self, address_city):
        """Sets the address_city of this Customer.

        City as part of the customer's address  # noqa: E501

        :param address_city: The address_city of this Customer.  # noqa: E501
        :type: str
        """

        self._address_city = address_city

    @property
    def address_country_code(self):
        """Gets the address_country_code of this Customer.  # noqa: E501

        Country code as part of the customer's address (ISO 3166-1 alpha-3 format compliant)  # noqa: E501

        :return: The address_country_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._address_country_code

    @address_country_code.setter
    def address_country_code(self, address_country_code):
        """Sets the address_country_code of this Customer.

        Country code as part of the customer's address (ISO 3166-1 alpha-3 format compliant)  # noqa: E501

        :param address_country_code: The address_country_code of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["ABW", "AFG", "AGO", "AIA", "ALA", "ALB", "AND", "ANT", "ARE", "ARG", "ARM", "ASM", "ATA", "ATF", "ATG", "AUS", "AUT", "AZE", "BDI", "BEL", "BEN", "BES", "BFA", "BGD", "BGR", "BHR", "BHS", "BIH", "BLM", "BLR", "BLZ", "BMU", "BOL", "BRA", "BRB", "BRN", "BTN", "BVT", "BWA", "CAF", "CAN", "CCK", "CHE", "CHL", "CHN", "CIV", "CMR", "COD", "COG", "COK", "COL", "COM", "CPV", "CRI", "CUB", "CUW", "CXR", "CYM", "CYP", "CZE", "DEU", "DJI", "DMA", "DNK", "DOM", "DZA", "ECU", "EGY", "ERI", "ESH", "ESP", "EST", "ETH", "FIN", "FJI", "FLK", "FRA", "FRO", "FSM", "GAB", "GBR", "GEO", "GGY", "GHA", "GIB", "GIN", "GLP", "GMB", "GNB", "GNQ", "GRC", "GRD", "GRL", "GTM", "GUF", "GUM", "GUY", "HKG", "HMD", "HND", "HRV", "HTI", "HUN", "IDN", "IMN", "IND", "IOT", "IRL", "IRN", "IRQ", "ISL", "ISR", "ITA", "JAM", "JEY", "JOR", "JPN", "KAZ", "KEN", "KGZ", "KHM", "KIR", "KNA", "KOR", "KWT", "LAO", "LBN", "LBR", "LBY", "LCA", "LIE", "LKA", "LSO", "LTU", "LUX", "LVA", "MAC", "MAF", "MAR", "MCO", "MDA", "MDG", "MDV", "MEX", "MHL", "MKD", "MLI", "MLT", "MMR", "MNE", "MNG", "MNP", "MOZ", "MRT", "MSR", "MTQ", "MUS", "MWI", "MYS", "MYT", "NAM", "NCL", "NER", "NFK", "NGA", "NIC", "NIU", "NLD", "NOR", "NPL", "NRU", "NZL", "OMN", "PAK", "PAN", "PCN", "PER", "PHL", "PLW", "PNG", "POL", "PRI", "PRK", "PRT", "PRY", "PSE", "PYF", "QAT", "REU", "ROU", "RUS", "RWA", "SAU", "SCG", "SDN", "SEN", "SGP", "SGS", "SHN", "SJM", "SLB", "SLE", "SLV", "SMR", "SOM", "SPM", "SRB", "STP", "SUR", "SVK", "SVN", "SWE", "SWZ", "SXM", "SYC", "SYR", "TCA", "TCD", "TGO", "THA", "TJK", "TKL", "TKM", "TLS", "TON", "TTO", "TUN", "TUR", "TUV", "TWN", "TZA", "UGA", "UKR", "UMI", "URY", "USA", "UZB", "VAT", "VCT", "VEN", "VGB", "VIR", "VNM", "VUT", "WLF", "WSM", "YEM", "ZAF", "ZMB", "ZWE"]  # noqa: E501
        if address_country_code not in allowed_values:
            raise ValueError(
                "Invalid value for `address_country_code` ({0}), must be one of {1}"  # noqa: E501
                .format(address_country_code, allowed_values)
            )

        self._address_country_code = address_country_code

    @property
    def contact_phone_number(self):
        """Gets the contact_phone_number of this Customer.  # noqa: E501

        Phone number for contact purpose  # noqa: E501

        :return: The contact_phone_number of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._contact_phone_number

    @contact_phone_number.setter
    def contact_phone_number(self, contact_phone_number):
        """Sets the contact_phone_number of this Customer.

        Phone number for contact purpose  # noqa: E501

        :param contact_phone_number: The contact_phone_number of this Customer.  # noqa: E501
        :type: str
        """

        self._contact_phone_number = contact_phone_number

    @property
    def contact_email_address(self):
        """Gets the contact_email_address of this Customer.  # noqa: E501

        Email address for contact purpose  # noqa: E501

        :return: The contact_email_address of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._contact_email_address

    @contact_email_address.setter
    def contact_email_address(self, contact_email_address):
        """Sets the contact_email_address of this Customer.

        Email address for contact purpose  # noqa: E501

        :param contact_email_address: The contact_email_address of this Customer.  # noqa: E501
        :type: str
        """

        self._contact_email_address = contact_email_address

    @property
    def fax(self):
        """Gets the fax of this Customer.  # noqa: E501

        Fax for contact purpose  # noqa: E501

        :return: The fax of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this Customer.

        Fax for contact purpose  # noqa: E501

        :param fax: The fax of this Customer.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def correspondence_language_code(self):
        """Gets the correspondence_language_code of this Customer.  # noqa: E501

        Language code for correspondences (IETF bcp47 format compliant)  # noqa: E501

        :return: The correspondence_language_code of this Customer.  # noqa: E501
        :rtype: str
        """
        return self._correspondence_language_code

    @correspondence_language_code.setter
    def correspondence_language_code(self, correspondence_language_code):
        """Sets the correspondence_language_code of this Customer.

        Language code for correspondences (IETF bcp47 format compliant)  # noqa: E501

        :param correspondence_language_code: The correspondence_language_code of this Customer.  # noqa: E501
        :type: str
        """
        allowed_values = ["de-DE", "en-UK", "nl-NL", "sv-SE", "fr-FR", "it-IT", "es-ES", "pt-PT", "cs-CZ", "sk-SK", "pl-PL"]  # noqa: E501
        if correspondence_language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `correspondence_language_code` ({0}), must be one of {1}"  # noqa: E501
                .format(correspondence_language_code, allowed_values)
            )

        self._correspondence_language_code = correspondence_language_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Customer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Customer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
