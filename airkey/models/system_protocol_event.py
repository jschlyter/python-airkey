# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemProtocolEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'translations': 'dict(str, str)'
    }

    attribute_map = {
        'type': 'type',
        'translations': 'translations'
    }

    def __init__(self, type=None, translations=None):  # noqa: E501
        """SystemProtocolEvent - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._translations = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if translations is not None:
            self.translations = translations

    @property
    def type(self):
        """Gets the type of this SystemProtocolEvent.  # noqa: E501

        Type of event  # noqa: E501

        :return: The type of this SystemProtocolEvent.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemProtocolEvent.

        Type of event  # noqa: E501

        :param type: The type of this SystemProtocolEvent.  # noqa: E501
        :type: str
        """
        allowed_values = ["CREATE_KEYRING", "EDIT_CYLINDER", "EDIT_KEYRING", "CHANGE_KEYRING_OWNER", "REVOKE_KEYRING_OWNER", "CREATE_AUTHORIZATION_KEY", "EDIT_AUTHORIZATION_KEY", "DELETE_AUTHORIZATION_KEY_IN_STATE_CREATE", "MARK_AUTHORIZATION_KEY_AS_DELETED", "UNDELETE_AUTHORIZATION_KEY", "CREATE_PERSON", "EDIT_PERSON", "DELETE_PERSON", "CREATE_AREA", "EDIT_AREA", "DELETE_AREA", "ASSIGN_CYLINDER_TO_AREA", "ASSIGN_AREA_TO_CYLINDER", "UNASSIGN_CYLINDER_FROM_AREA", "UNASSIGN_AREA_FROM_CYLINDER", "QUANTITY_CREDIT_ADDED", "TEMPORAL_CREDIT_ADDED", "INVALID_CREDIT_ENTERED", "CREDIT_REDEEMING_LOCKED", "AUTH_KEY_PRODUCTION_FINISHED", "GENERATE_MOBILE_PHONE_PAIRING_CODE", "GENERATE_MOBILE_PHONE_RE_PAIRING_CODE", "FINALIZE_MOBILE_PHONE_PAIRING", "FINALIZE_MOBILE_PHONE_RE_PAIRING", "MEDIUM_EMPTIED", "CREATE_TIMEZONE", "EDIT_TIMEZONE", "EDIT_TIMEZONE_NEW_DEFAULT", "CREATE_DAYLIGHT_SAVING_ENTRIES", "EDIT_DAYLIGHT_SAVING_ENTRIES", "CREATE_ACO", "EDIT_ACO", "DELETE_ACO", "CREATE_ACO_FINISHED", "ASSIGN_KEY_CARD_TO_CUSTOMER_SUCCESS", "ASSIGN_CYLINDER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS", "ASSIGN_CYLINDER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS", "ASSIGN_CYLINDER_TO_CUSTOMER_FAILURE", "ASSIGN_KEY_CARD_TO_CUSTOMER_FAILURE", "INITIATE_REMOVE_CYLINDER_FROM_CUSTOMER", "FINALIZE_REMOVE_CYLINDER_FROM_CUSTOMER", "REMOVE_CYLINDER_FROM_CUSTOMER_FAILED", "REMOVE_KEYRING_FROM_CUSTOMER_FAILED", "INITIATE_REMOVE_KEYRING_FROM_CUSTOMER", "FINALIZE_REMOVE_MOBILE_PHONE_FROM_CUSTOMER", "FINALIZE_REMOVE_KEY_CARD_FROM_CUSTOMER", "EDIT_CUSTOMER_SETTINGS", "REACTIVATE_KEYRING_INITIATED", "REACTIVATE_KEYRING_FINISHED", "REACTIVATE_KEYRING_FINISHED_BY_SUPPORT", "DEACTIVATE_KEYRING_INITIATED", "DEACTIVATE_KEYRING_FINISHED", "DEACTIVATE_KEYRING_FINISHED_BY_SUPPORT", "PASSWORD_RESET", "ADD_SUPPORT_ACO", "DELETE_SUPPORT_ACO", "CREATE_SHARED_CYLINDER_CODE", "REDEEM_SHARED_CYLINDER_CODE_OWNER", "REDEEM_SHARED_CYLINDER_CODE", "REMOVE_EXPIRED_ACO_ACTIVATION", "PIN_RESET_INITIATED", "PIN_RESET_FINISHED", "SINGLE_LOCKING_SYSTEM_LOG_DELETED", "ALL_LOCKING_SYSTEM_LOGS_OF_A_PERSON_DELETED", "UNSHARE_CYLINDER", "REPLACEMENT_CYLINDER_CREATED", "REPLACEMENT_KNOB_CREATED", "REPLACEMENT_CYLINDER_INSTALLED", "REPLACEMENT_KNOB_INSTALLED", "REPLACEMENT_CYLINDER_FAILED", "REPLACEMENT_KNOB_FAILED", "EDIT_DEFAULT_LOG_SETTINGS", "CYLINDER_DEFAULTS_EDITED", "DELETE_MAINTENANCE_WINDOW", "EDIT_MAINTENANCE_WINDOW", "CREATE_MAINTENANCE_WINDOW", "ACKNOWLEDGE_MAINTENANCE_WINDOW", "VIEW_LOG", "REMOVE_KEYRING_AFTER_COMPLETE_DEACTIVATION", "MEDIUM_REMOVED_MANUALLY", "MEDIUM_MARKED_FOR_REMOVAL", "REMOVE_DAMAGED_CYLINDER", "REMOVE_DAMAGED_CYLINDER_FAILED", "EDIT_WALLREADER", "ASSIGN_WALLREADER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS", "ASSIGN_WALLREADER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS", "ASSIGN_WALLREADER_TO_CUSTOMER_FAILURE", "INITIATE_REMOVE_WALLREADER_FROM_CUSTOMER", "FINALIZE_REMOVE_WALLREADER_FROM_CUSTOMER", "REMOVE_WALLREADER_FROM_CUSTOMER_FAILED", "REPLACEMENT_WALLREADER_CREATED", "REPLACEMENT_READER_UNIT_CREATED", "REPLACEMENT_WALLREADER_INSTALLED", "REPLACEMENT_READER_UNIT_INSTALLED", "REPLACEMENT_WALLREADER_FAILED", "REPLACEMENT_READER_UNIT_FAILED", "REMOVE_DAMAGED_WALLREADER", "REMOVE_DAMAGED_WALLREADER_FAILED", "ISSUE_RECEIPT_EXPORTED", "MAINTENANCE_MAIL_DISCONTINUED", "QUICK_REGISTRY_SMS_SENT", "EXPORT_AREAS", "EXPORT_LOCKING_PLAN", "EXPORT_KEYRINGS", "EXPORT_OWN_KEYRINGS", "EXPORT_FOREIGN_KEYRINGS", "EXPORT_LOCKING_COMPONENTS", "ACOS_EXPORTED", "HANDS_FREE_MODE_ACTIVATED", "HANDS_FREE_MODE_DEACTIVATED", "EXPORT_PERSONS", "KEYRING_PROTOCOL_EXPORTED", "LOCKING_COMPONENT_PROTOCOL_EXPORTED", "JOURNAL_EXPORTED", "DEACTIVATE_HOLIDAYS", "REACTIVATE_HOLIDAYS", "CREATE_HOLIDAY", "DELETE_HOLIDAY_SINGLE", "DELETE_HOLIDAY_SERIES_SINGLE", "DELETE_HOLIDAY_SERIES_MULTIPLE", "EDIT_HOLIDAY_SINGLE", "EDIT_HOLIDAY_SERIES_SINGLE", "EDIT_HOLIDAY_SERIES_MULTIPLE", "UNLOCK_FROM_LOCK_SCREEN_ACTIVATED", "UNLOCK_FROM_LOCK_SCREEN_DEACTIVATED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def translations(self):
        """Gets the translations of this SystemProtocolEvent.  # noqa: E501

        Event type translations comprising all requested languages (default only \"de-DE\")  # noqa: E501

        :return: The translations of this SystemProtocolEvent.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._translations

    @translations.setter
    def translations(self, translations):
        """Sets the translations of this SystemProtocolEvent.

        Event type translations comprising all requested languages (default only \"de-DE\")  # noqa: E501

        :param translations: The translations of this SystemProtocolEvent.  # noqa: E501
        :type: dict(str, str)
        """

        self._translations = translations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemProtocolEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemProtocolEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
