# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LockMaintenanceTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lock': 'SimpleLock',
        'maintenance_task_list': 'list[str]'
    }

    attribute_map = {
        'lock': 'lock',
        'maintenance_task_list': 'maintenanceTaskList'
    }

    def __init__(self, lock=None, maintenance_task_list=None):  # noqa: E501
        """LockMaintenanceTask - a model defined in Swagger"""  # noqa: E501
        self._lock = None
        self._maintenance_task_list = None
        self.discriminator = None
        if lock is not None:
            self.lock = lock
        if maintenance_task_list is not None:
            self.maintenance_task_list = maintenance_task_list

    @property
    def lock(self):
        """Gets the lock of this LockMaintenanceTask.  # noqa: E501


        :return: The lock of this LockMaintenanceTask.  # noqa: E501
        :rtype: SimpleLock
        """
        return self._lock

    @lock.setter
    def lock(self, lock):
        """Sets the lock of this LockMaintenanceTask.


        :param lock: The lock of this LockMaintenanceTask.  # noqa: E501
        :type: SimpleLock
        """

        self._lock = lock

    @property
    def maintenance_task_list(self):
        """Gets the maintenance_task_list of this LockMaintenanceTask.  # noqa: E501

        List of different available maintenance tasks  # noqa: E501

        :return: The maintenance_task_list of this LockMaintenanceTask.  # noqa: E501
        :rtype: list[str]
        """
        return self._maintenance_task_list

    @maintenance_task_list.setter
    def maintenance_task_list(self, maintenance_task_list):
        """Sets the maintenance_task_list of this LockMaintenanceTask.

        List of different available maintenance tasks  # noqa: E501

        :param maintenance_task_list: The maintenance_task_list of this LockMaintenanceTask.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["EMPTY_BATTERY", "CHANGE_BATTERY", "BLACKLIST_NOT_SYNCHRONIZED", "CLOCK_INVALID", "AREAS_NOT_SYNCHRONIZED", "TIMEZONES_NOT_SYNCHRONIZED", "DELETE_CYLINDER", "DELETE_WALL_READER", "NEW_CYLINDER_FIRMWARE_AVAILABLE", "NEW_WALL_READER_FIRMWARE_AVAILABLE", "CYLINDER_AND_KNOB_REPLACEMENT", "CONTROL_AND_READER_UNIT_REPLACEMENT", "CYLINDER_AND_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE", "CONTROL_AND_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE", "KNOB_REPLACEMENT", "READER_UNIT_REPLACEMENT", "KNOB_REPLACEMENT_WITHOUT_INCOMPLETE", "READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE", "KNOB_INSTALLATION", "READER_UNIT_INSTALLATION", "CYLINDER_AND_KNOB_INSTALLATION", "CONTROL_AND_READER_UNIT_INSTALLATION", "WHITELIST_NOT_SYNCHRONIZED", "CYLINDER_TEST_PENDING", "WALL_READER_TEST_PENDING", "REMOVE_DAMAGED_CYLINDER", "REMOVE_DAMAGED_WALL_READER", "UNBLOCKING_DURATION_NOT_SYNCHRONIZED", "PERMANENT_OPENING_SETTINGS_NOT_SYNCHRONIZED", "HOLIDAY_CALENDAR_NOT_SYNCHRONIZED", "RS485_OUTPUT_NOT_SYNCHRONIZED", "UNKNOWN"]  # noqa: E501
        if not set(maintenance_task_list).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `maintenance_task_list` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(maintenance_task_list) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._maintenance_task_list = maintenance_task_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LockMaintenanceTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LockMaintenanceTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
