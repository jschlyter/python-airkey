# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Medium(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'version': 'int',
        'name': 'str',
        'medium_identifier': 'str',
        'locking_system_id': 'int',
        'medium_type': 'str',
        'last_synchronized_on': 'str',
        'comment': 'str',
        'release_duration_extended': 'bool',
        'permanent_opening_enabled': 'bool',
        'activated': 'bool',
        'person_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'name': 'name',
        'medium_identifier': 'mediumIdentifier',
        'locking_system_id': 'lockingSystemId',
        'medium_type': 'mediumType',
        'last_synchronized_on': 'lastSynchronizedOn',
        'comment': 'comment',
        'release_duration_extended': 'releaseDurationExtended',
        'permanent_opening_enabled': 'permanentOpeningEnabled',
        'activated': 'activated',
        'person_id': 'personId'
    }

    discriminator_value_class_map = {
          'Card': 'Card',
'Phone': 'Phone'    }

    def __init__(self, id=None, version=None, name=None, medium_identifier=None, locking_system_id=None, medium_type=None, last_synchronized_on=None, comment=None, release_duration_extended=None, permanent_opening_enabled=None, activated=None, person_id=None):  # noqa: E501
        """Medium - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._version = None
        self._name = None
        self._medium_identifier = None
        self._locking_system_id = None
        self._medium_type = None
        self._last_synchronized_on = None
        self._comment = None
        self._release_duration_extended = None
        self._permanent_opening_enabled = None
        self._activated = None
        self._person_id = None
        self.discriminator = 'mediumType'
        self.id = id
        self.version = version
        if name is not None:
            self.name = name
        if medium_identifier is not None:
            self.medium_identifier = medium_identifier
        if locking_system_id is not None:
            self.locking_system_id = locking_system_id
        if medium_type is not None:
            self.medium_type = medium_type
        if last_synchronized_on is not None:
            self.last_synchronized_on = last_synchronized_on
        if comment is not None:
            self.comment = comment
        self.release_duration_extended = release_duration_extended
        self.permanent_opening_enabled = permanent_opening_enabled
        if activated is not None:
            self.activated = activated
        if person_id is not None:
            self.person_id = person_id

    @property
    def id(self):
        """Gets the id of this Medium.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The id of this Medium.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Medium.

        Unique identifier  # noqa: E501

        :param id: The id of this Medium.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def version(self):
        """Gets the version of this Medium.  # noqa: E501

        Current version number of the medium  # noqa: E501

        :return: The version of this Medium.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Medium.

        Current version number of the medium  # noqa: E501

        :param version: The version of this Medium.  # noqa: E501
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def name(self):
        """Gets the name of this Medium.  # noqa: E501

        Name of the medium (max. 50 characters)  # noqa: E501

        :return: The name of this Medium.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Medium.

        Name of the medium (max. 50 characters)  # noqa: E501

        :param name: The name of this Medium.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def medium_identifier(self):
        """Gets the medium_identifier of this Medium.  # noqa: E501

        Identifier of the medium  # noqa: E501

        :return: The medium_identifier of this Medium.  # noqa: E501
        :rtype: str
        """
        return self._medium_identifier

    @medium_identifier.setter
    def medium_identifier(self, medium_identifier):
        """Sets the medium_identifier of this Medium.

        Identifier of the medium  # noqa: E501

        :param medium_identifier: The medium_identifier of this Medium.  # noqa: E501
        :type: str
        """

        self._medium_identifier = medium_identifier

    @property
    def locking_system_id(self):
        """Gets the locking_system_id of this Medium.  # noqa: E501

        Technical identifier of the medium  # noqa: E501

        :return: The locking_system_id of this Medium.  # noqa: E501
        :rtype: int
        """
        return self._locking_system_id

    @locking_system_id.setter
    def locking_system_id(self, locking_system_id):
        """Sets the locking_system_id of this Medium.

        Technical identifier of the medium  # noqa: E501

        :param locking_system_id: The locking_system_id of this Medium.  # noqa: E501
        :type: int
        """

        self._locking_system_id = locking_system_id

    @property
    def medium_type(self):
        """Gets the medium_type of this Medium.  # noqa: E501

        Type of the medium  # noqa: E501

        :return: The medium_type of this Medium.  # noqa: E501
        :rtype: str
        """
        return self._medium_type

    @medium_type.setter
    def medium_type(self, medium_type):
        """Sets the medium_type of this Medium.

        Type of the medium  # noqa: E501

        :param medium_type: The medium_type of this Medium.  # noqa: E501
        :type: str
        """
        allowed_values = ["PHONE", "CARD"]  # noqa: E501
        if medium_type not in allowed_values:
            raise ValueError(
                "Invalid value for `medium_type` ({0}), must be one of {1}"  # noqa: E501
                .format(medium_type, allowed_values)
            )

        self._medium_type = medium_type

    @property
    def last_synchronized_on(self):
        """Gets the last_synchronized_on of this Medium.  # noqa: E501

        Timestamp of the last synchronization (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :return: The last_synchronized_on of this Medium.  # noqa: E501
        :rtype: str
        """
        return self._last_synchronized_on

    @last_synchronized_on.setter
    def last_synchronized_on(self, last_synchronized_on):
        """Sets the last_synchronized_on of this Medium.

        Timestamp of the last synchronization (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :param last_synchronized_on: The last_synchronized_on of this Medium.  # noqa: E501
        :type: str
        """

        self._last_synchronized_on = last_synchronized_on

    @property
    def comment(self):
        """Gets the comment of this Medium.  # noqa: E501

        Comment (max. 500 characters)  # noqa: E501

        :return: The comment of this Medium.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Medium.

        Comment (max. 500 characters)  # noqa: E501

        :param comment: The comment of this Medium.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def release_duration_extended(self):
        """Gets the release_duration_extended of this Medium.  # noqa: E501

        Release duration is extended or not  # noqa: E501

        :return: The release_duration_extended of this Medium.  # noqa: E501
        :rtype: bool
        """
        return self._release_duration_extended

    @release_duration_extended.setter
    def release_duration_extended(self, release_duration_extended):
        """Sets the release_duration_extended of this Medium.

        Release duration is extended or not  # noqa: E501

        :param release_duration_extended: The release_duration_extended of this Medium.  # noqa: E501
        :type: bool
        """
        if release_duration_extended is None:
            raise ValueError("Invalid value for `release_duration_extended`, must not be `None`")  # noqa: E501

        self._release_duration_extended = release_duration_extended

    @property
    def permanent_opening_enabled(self):
        """Gets the permanent_opening_enabled of this Medium.  # noqa: E501

        Permanent opening is enabled or not  # noqa: E501

        :return: The permanent_opening_enabled of this Medium.  # noqa: E501
        :rtype: bool
        """
        return self._permanent_opening_enabled

    @permanent_opening_enabled.setter
    def permanent_opening_enabled(self, permanent_opening_enabled):
        """Sets the permanent_opening_enabled of this Medium.

        Permanent opening is enabled or not  # noqa: E501

        :param permanent_opening_enabled: The permanent_opening_enabled of this Medium.  # noqa: E501
        :type: bool
        """
        if permanent_opening_enabled is None:
            raise ValueError("Invalid value for `permanent_opening_enabled`, must not be `None`")  # noqa: E501

        self._permanent_opening_enabled = permanent_opening_enabled

    @property
    def activated(self):
        """Gets the activated of this Medium.  # noqa: E501

        Activated or not  # noqa: E501

        :return: The activated of this Medium.  # noqa: E501
        :rtype: bool
        """
        return self._activated

    @activated.setter
    def activated(self, activated):
        """Sets the activated of this Medium.

        Activated or not  # noqa: E501

        :param activated: The activated of this Medium.  # noqa: E501
        :type: bool
        """

        self._activated = activated

    @property
    def person_id(self):
        """Gets the person_id of this Medium.  # noqa: E501

        Person this medium is assigned to  # noqa: E501

        :return: The person_id of this Medium.  # noqa: E501
        :rtype: int
        """
        return self._person_id

    @person_id.setter
    def person_id(self, person_id):
        """Sets the person_id of this Medium.

        Person this medium is assigned to  # noqa: E501

        :param person_id: The person_id of this Medium.  # noqa: E501
        :type: int
        """

        self._person_id = person_id

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Medium, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Medium):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
