# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleAuthorizationCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_info': 'SimpleAuthorizationInfo',
        'medium_id': 'int',
        'lock_id': 'int',
        'area_id': 'int',
        'remove_all_existing_authorizations_for_pair': 'bool',
        'push_message': 'str'
    }

    attribute_map = {
        'authorization_info': 'authorizationInfo',
        'medium_id': 'mediumId',
        'lock_id': 'lockId',
        'area_id': 'areaId',
        'remove_all_existing_authorizations_for_pair': 'removeAllExistingAuthorizationsForPair',
        'push_message': 'pushMessage'
    }

    def __init__(self, authorization_info=None, medium_id=None, lock_id=None, area_id=None, remove_all_existing_authorizations_for_pair=None, push_message=None):  # noqa: E501
        """SimpleAuthorizationCreate - a model defined in Swagger"""  # noqa: E501
        self._authorization_info = None
        self._medium_id = None
        self._lock_id = None
        self._area_id = None
        self._remove_all_existing_authorizations_for_pair = None
        self._push_message = None
        self.discriminator = None
        self.authorization_info = authorization_info
        self.medium_id = medium_id
        if lock_id is not None:
            self.lock_id = lock_id
        if area_id is not None:
            self.area_id = area_id
        if remove_all_existing_authorizations_for_pair is not None:
            self.remove_all_existing_authorizations_for_pair = remove_all_existing_authorizations_for_pair
        if push_message is not None:
            self.push_message = push_message

    @property
    def authorization_info(self):
        """Gets the authorization_info of this SimpleAuthorizationCreate.  # noqa: E501


        :return: The authorization_info of this SimpleAuthorizationCreate.  # noqa: E501
        :rtype: SimpleAuthorizationInfo
        """
        return self._authorization_info

    @authorization_info.setter
    def authorization_info(self, authorization_info):
        """Sets the authorization_info of this SimpleAuthorizationCreate.


        :param authorization_info: The authorization_info of this SimpleAuthorizationCreate.  # noqa: E501
        :type: SimpleAuthorizationInfo
        """
        if authorization_info is None:
            raise ValueError("Invalid value for `authorization_info`, must not be `None`")  # noqa: E501

        self._authorization_info = authorization_info

    @property
    def medium_id(self):
        """Gets the medium_id of this SimpleAuthorizationCreate.  # noqa: E501

        Medium to which this authorization should be defined  # noqa: E501

        :return: The medium_id of this SimpleAuthorizationCreate.  # noqa: E501
        :rtype: int
        """
        return self._medium_id

    @medium_id.setter
    def medium_id(self, medium_id):
        """Sets the medium_id of this SimpleAuthorizationCreate.

        Medium to which this authorization should be defined  # noqa: E501

        :param medium_id: The medium_id of this SimpleAuthorizationCreate.  # noqa: E501
        :type: int
        """
        if medium_id is None:
            raise ValueError("Invalid value for `medium_id`, must not be `None`")  # noqa: E501

        self._medium_id = medium_id

    @property
    def lock_id(self):
        """Gets the lock_id of this SimpleAuthorizationCreate.  # noqa: E501

        Lock for which the medium should be authorized. Required when no area id is set.  # noqa: E501

        :return: The lock_id of this SimpleAuthorizationCreate.  # noqa: E501
        :rtype: int
        """
        return self._lock_id

    @lock_id.setter
    def lock_id(self, lock_id):
        """Sets the lock_id of this SimpleAuthorizationCreate.

        Lock for which the medium should be authorized. Required when no area id is set.  # noqa: E501

        :param lock_id: The lock_id of this SimpleAuthorizationCreate.  # noqa: E501
        :type: int
        """

        self._lock_id = lock_id

    @property
    def area_id(self):
        """Gets the area_id of this SimpleAuthorizationCreate.  # noqa: E501

        Area for which the medium should be authorized. Required when no lock id is set.  # noqa: E501

        :return: The area_id of this SimpleAuthorizationCreate.  # noqa: E501
        :rtype: int
        """
        return self._area_id

    @area_id.setter
    def area_id(self, area_id):
        """Sets the area_id of this SimpleAuthorizationCreate.

        Area for which the medium should be authorized. Required when no lock id is set.  # noqa: E501

        :param area_id: The area_id of this SimpleAuthorizationCreate.  # noqa: E501
        :type: int
        """

        self._area_id = area_id

    @property
    def remove_all_existing_authorizations_for_pair(self):
        """Gets the remove_all_existing_authorizations_for_pair of this SimpleAuthorizationCreate.  # noqa: E501

        Removes all authorizations for the given medium – lock or medium – area pair before creating the given simple authorization (avoids conflict potential which may result in failure).  # noqa: E501

        :return: The remove_all_existing_authorizations_for_pair of this SimpleAuthorizationCreate.  # noqa: E501
        :rtype: bool
        """
        return self._remove_all_existing_authorizations_for_pair

    @remove_all_existing_authorizations_for_pair.setter
    def remove_all_existing_authorizations_for_pair(self, remove_all_existing_authorizations_for_pair):
        """Sets the remove_all_existing_authorizations_for_pair of this SimpleAuthorizationCreate.

        Removes all authorizations for the given medium – lock or medium – area pair before creating the given simple authorization (avoids conflict potential which may result in failure).  # noqa: E501

        :param remove_all_existing_authorizations_for_pair: The remove_all_existing_authorizations_for_pair of this SimpleAuthorizationCreate.  # noqa: E501
        :type: bool
        """

        self._remove_all_existing_authorizations_for_pair = remove_all_existing_authorizations_for_pair

    @property
    def push_message(self):
        """Gets the push_message of this SimpleAuthorizationCreate.  # noqa: E501

        Notification text that will be shown on the phone for new/changed authorizations. Default text will be used if not set.  # noqa: E501

        :return: The push_message of this SimpleAuthorizationCreate.  # noqa: E501
        :rtype: str
        """
        return self._push_message

    @push_message.setter
    def push_message(self, push_message):
        """Sets the push_message of this SimpleAuthorizationCreate.

        Notification text that will be shown on the phone for new/changed authorizations. Default text will be used if not set.  # noqa: E501

        :param push_message: The push_message of this SimpleAuthorizationCreate.  # noqa: E501
        :type: str
        """

        self._push_message = push_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleAuthorizationCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleAuthorizationCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
