# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LockProtocolEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_category': 'str',
        'event': 'LockProtocolEvent',
        'details': 'LockProtocolDetails',
        'lock_utc_delta': 'int',
        'medium': 'SimpleMedium',
        'operator_name': 'str',
        'source_lock': 'bool',
        'source_medium': 'bool',
        'timestamp': 'str'
    }

    attribute_map = {
        'event_category': 'eventCategory',
        'event': 'event',
        'details': 'details',
        'lock_utc_delta': 'lockUtcDelta',
        'medium': 'medium',
        'operator_name': 'operatorName',
        'source_lock': 'sourceLock',
        'source_medium': 'sourceMedium',
        'timestamp': 'timestamp'
    }

    def __init__(self, event_category=None, event=None, details=None, lock_utc_delta=None, medium=None, operator_name=None, source_lock=None, source_medium=None, timestamp=None):  # noqa: E501
        """LockProtocolEntry - a model defined in Swagger"""  # noqa: E501
        self._event_category = None
        self._event = None
        self._details = None
        self._lock_utc_delta = None
        self._medium = None
        self._operator_name = None
        self._source_lock = None
        self._source_medium = None
        self._timestamp = None
        self.discriminator = None
        if event_category is not None:
            self.event_category = event_category
        if event is not None:
            self.event = event
        if details is not None:
            self.details = details
        if lock_utc_delta is not None:
            self.lock_utc_delta = lock_utc_delta
        if medium is not None:
            self.medium = medium
        if operator_name is not None:
            self.operator_name = operator_name
        if source_lock is not None:
            self.source_lock = source_lock
        if source_medium is not None:
            self.source_medium = source_medium
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def event_category(self):
        """Gets the event_category of this LockProtocolEntry.  # noqa: E501

        Category of event  # noqa: E501

        :return: The event_category of this LockProtocolEntry.  # noqa: E501
        :rtype: str
        """
        return self._event_category

    @event_category.setter
    def event_category(self, event_category):
        """Sets the event_category of this LockProtocolEntry.

        Category of event  # noqa: E501

        :param event_category: The event_category of this LockProtocolEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["BACKEND_EVENT", "LOCKING_EVENT", "PERMANENT_OPENING_MODE_EVENT", "SYNC_EVENT", "SYNC_BY_SUPPORT_EVENT", "DUMMY_EVENT"]  # noqa: E501
        if event_category not in allowed_values:
            raise ValueError(
                "Invalid value for `event_category` ({0}), must be one of {1}"  # noqa: E501
                .format(event_category, allowed_values)
            )

        self._event_category = event_category

    @property
    def event(self):
        """Gets the event of this LockProtocolEntry.  # noqa: E501


        :return: The event of this LockProtocolEntry.  # noqa: E501
        :rtype: LockProtocolEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this LockProtocolEntry.


        :param event: The event of this LockProtocolEntry.  # noqa: E501
        :type: LockProtocolEvent
        """

        self._event = event

    @property
    def details(self):
        """Gets the details of this LockProtocolEntry.  # noqa: E501


        :return: The details of this LockProtocolEntry.  # noqa: E501
        :rtype: LockProtocolDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this LockProtocolEntry.


        :param details: The details of this LockProtocolEntry.  # noqa: E501
        :type: LockProtocolDetails
        """

        self._details = details

    @property
    def lock_utc_delta(self):
        """Gets the lock_utc_delta of this LockProtocolEntry.  # noqa: E501

        Time difference of locking component regarding UTC  # noqa: E501

        :return: The lock_utc_delta of this LockProtocolEntry.  # noqa: E501
        :rtype: int
        """
        return self._lock_utc_delta

    @lock_utc_delta.setter
    def lock_utc_delta(self, lock_utc_delta):
        """Sets the lock_utc_delta of this LockProtocolEntry.

        Time difference of locking component regarding UTC  # noqa: E501

        :param lock_utc_delta: The lock_utc_delta of this LockProtocolEntry.  # noqa: E501
        :type: int
        """

        self._lock_utc_delta = lock_utc_delta

    @property
    def medium(self):
        """Gets the medium of this LockProtocolEntry.  # noqa: E501


        :return: The medium of this LockProtocolEntry.  # noqa: E501
        :rtype: SimpleMedium
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this LockProtocolEntry.


        :param medium: The medium of this LockProtocolEntry.  # noqa: E501
        :type: SimpleMedium
        """

        self._medium = medium

    @property
    def operator_name(self):
        """Gets the operator_name of this LockProtocolEntry.  # noqa: E501

        Name of person who was responsible for this event  # noqa: E501

        :return: The operator_name of this LockProtocolEntry.  # noqa: E501
        :rtype: str
        """
        return self._operator_name

    @operator_name.setter
    def operator_name(self, operator_name):
        """Sets the operator_name of this LockProtocolEntry.

        Name of person who was responsible for this event  # noqa: E501

        :param operator_name: The operator_name of this LockProtocolEntry.  # noqa: E501
        :type: str
        """

        self._operator_name = operator_name

    @property
    def source_lock(self):
        """Gets the source_lock of this LockProtocolEntry.  # noqa: E501

        Locking component has verified event or not  # noqa: E501

        :return: The source_lock of this LockProtocolEntry.  # noqa: E501
        :rtype: bool
        """
        return self._source_lock

    @source_lock.setter
    def source_lock(self, source_lock):
        """Sets the source_lock of this LockProtocolEntry.

        Locking component has verified event or not  # noqa: E501

        :param source_lock: The source_lock of this LockProtocolEntry.  # noqa: E501
        :type: bool
        """

        self._source_lock = source_lock

    @property
    def source_medium(self):
        """Gets the source_medium of this LockProtocolEntry.  # noqa: E501

        Medium has verified event or not  # noqa: E501

        :return: The source_medium of this LockProtocolEntry.  # noqa: E501
        :rtype: bool
        """
        return self._source_medium

    @source_medium.setter
    def source_medium(self, source_medium):
        """Sets the source_medium of this LockProtocolEntry.

        Medium has verified event or not  # noqa: E501

        :param source_medium: The source_medium of this LockProtocolEntry.  # noqa: E501
        :type: bool
        """

        self._source_medium = source_medium

    @property
    def timestamp(self):
        """Gets the timestamp of this LockProtocolEntry.  # noqa: E501

        Timestamp of the event (ISO 8601-format compliant date with time in UTC, milliseconds precision)  # noqa: E501

        :return: The timestamp of this LockProtocolEntry.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LockProtocolEntry.

        Timestamp of the event (ISO 8601-format compliant date with time in UTC, milliseconds precision)  # noqa: E501

        :param timestamp: The timestamp of this LockProtocolEntry.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LockProtocolEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LockProtocolEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
