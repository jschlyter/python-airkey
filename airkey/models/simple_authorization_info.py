# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from airkey.models.authorization_info import AuthorizationInfo  # noqa: F401,E501

class SimpleAuthorizationInfo(AuthorizationInfo):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'valid_from': 'str',
        'valid_to': 'str'
    }
    if hasattr(AuthorizationInfo, "swagger_types"):
        swagger_types.update(AuthorizationInfo.swagger_types)

    attribute_map = {
        'type': 'type',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }
    if hasattr(AuthorizationInfo, "attribute_map"):
        attribute_map.update(AuthorizationInfo.attribute_map)

    def __init__(self, type=None, valid_from=None, valid_to=None, *args, **kwargs):  # noqa: E501
        """SimpleAuthorizationInfo - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None
        self.type = type
        self.valid_from = valid_from
        self.valid_to = valid_to
        AuthorizationInfo.__init__(self, *args, **kwargs)

    @property
    def type(self):
        """Gets the type of this SimpleAuthorizationInfo.  # noqa: E501

        Simple type of authorization  # noqa: E501

        :return: The type of this SimpleAuthorizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SimpleAuthorizationInfo.

        Simple type of authorization  # noqa: E501

        :param type: The type of this SimpleAuthorizationInfo.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["SIMPLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def valid_from(self):
        """Gets the valid_from of this SimpleAuthorizationInfo.  # noqa: E501

        Date from when the authorization is valid regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)  # noqa: E501

        :return: The valid_from of this SimpleAuthorizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this SimpleAuthorizationInfo.

        Date from when the authorization is valid regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)  # noqa: E501

        :param valid_from: The valid_from of this SimpleAuthorizationInfo.  # noqa: E501
        :type: str
        """
        if valid_from is None:
            raise ValueError("Invalid value for `valid_from`, must not be `None`")  # noqa: E501

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this SimpleAuthorizationInfo.  # noqa: E501

        Date until when the authorization is valid regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)  # noqa: E501

        :return: The valid_to of this SimpleAuthorizationInfo.  # noqa: E501
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this SimpleAuthorizationInfo.

        Date until when the authorization is valid regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)  # noqa: E501

        :param valid_to: The valid_to of this SimpleAuthorizationInfo.  # noqa: E501
        :type: str
        """
        if valid_to is None:
            raise ValueError("Invalid value for `valid_to`, must not be `None`")  # noqa: E501

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleAuthorizationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleAuthorizationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
