# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SystemProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administrator_name': 'str',
        'user_id': 'int',
        'system_protocol_entry': 'SystemProtocolEntry'
    }

    attribute_map = {
        'administrator_name': 'administratorName',
        'user_id': 'userId',
        'system_protocol_entry': 'systemProtocolEntry'
    }

    def __init__(self, administrator_name=None, user_id=None, system_protocol_entry=None):  # noqa: E501
        """SystemProtocol - a model defined in Swagger"""  # noqa: E501
        self._administrator_name = None
        self._user_id = None
        self._system_protocol_entry = None
        self.discriminator = None
        if administrator_name is not None:
            self.administrator_name = administrator_name
        if user_id is not None:
            self.user_id = user_id
        if system_protocol_entry is not None:
            self.system_protocol_entry = system_protocol_entry

    @property
    def administrator_name(self):
        """Gets the administrator_name of this SystemProtocol.  # noqa: E501

        Name of the administrator who was responsible for this event  # noqa: E501

        :return: The administrator_name of this SystemProtocol.  # noqa: E501
        :rtype: str
        """
        return self._administrator_name

    @administrator_name.setter
    def administrator_name(self, administrator_name):
        """Sets the administrator_name of this SystemProtocol.

        Name of the administrator who was responsible for this event  # noqa: E501

        :param administrator_name: The administrator_name of this SystemProtocol.  # noqa: E501
        :type: str
        """

        self._administrator_name = administrator_name

    @property
    def user_id(self):
        """Gets the user_id of this SystemProtocol.  # noqa: E501

        Unique identifier of the administrator who was responsible for this event  # noqa: E501

        :return: The user_id of this SystemProtocol.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SystemProtocol.

        Unique identifier of the administrator who was responsible for this event  # noqa: E501

        :param user_id: The user_id of this SystemProtocol.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def system_protocol_entry(self):
        """Gets the system_protocol_entry of this SystemProtocol.  # noqa: E501


        :return: The system_protocol_entry of this SystemProtocol.  # noqa: E501
        :rtype: SystemProtocolEntry
        """
        return self._system_protocol_entry

    @system_protocol_entry.setter
    def system_protocol_entry(self, system_protocol_entry):
        """Sets the system_protocol_entry of this SystemProtocol.


        :param system_protocol_entry: The system_protocol_entry of this SystemProtocol.  # noqa: E501
        :type: SystemProtocolEntry
        """

        self._system_protocol_entry = system_protocol_entry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemProtocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
