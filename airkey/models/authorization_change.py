# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuthorizationChange(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_create_list': 'list[AuthorizationCreate]',
        'authorization_update_list': 'list[Authorization]',
        'push_message': 'str'
    }

    attribute_map = {
        'authorization_create_list': 'authorizationCreateList',
        'authorization_update_list': 'authorizationUpdateList',
        'push_message': 'pushMessage'
    }

    def __init__(self, authorization_create_list=None, authorization_update_list=None, push_message=None):  # noqa: E501
        """AuthorizationChange - a model defined in Swagger"""  # noqa: E501
        self._authorization_create_list = None
        self._authorization_update_list = None
        self._push_message = None
        self.discriminator = None
        self.authorization_create_list = authorization_create_list
        self.authorization_update_list = authorization_update_list
        if push_message is not None:
            self.push_message = push_message

    @property
    def authorization_create_list(self):
        """Gets the authorization_create_list of this AuthorizationChange.  # noqa: E501

        List of medium authorizations to be created for the provided locks/areas  # noqa: E501

        :return: The authorization_create_list of this AuthorizationChange.  # noqa: E501
        :rtype: list[AuthorizationCreate]
        """
        return self._authorization_create_list

    @authorization_create_list.setter
    def authorization_create_list(self, authorization_create_list):
        """Sets the authorization_create_list of this AuthorizationChange.

        List of medium authorizations to be created for the provided locks/areas  # noqa: E501

        :param authorization_create_list: The authorization_create_list of this AuthorizationChange.  # noqa: E501
        :type: list[AuthorizationCreate]
        """
        if authorization_create_list is None:
            raise ValueError("Invalid value for `authorization_create_list`, must not be `None`")  # noqa: E501

        self._authorization_create_list = authorization_create_list

    @property
    def authorization_update_list(self):
        """Gets the authorization_update_list of this AuthorizationChange.  # noqa: E501

        List of medium authorizations to be updated  # noqa: E501

        :return: The authorization_update_list of this AuthorizationChange.  # noqa: E501
        :rtype: list[Authorization]
        """
        return self._authorization_update_list

    @authorization_update_list.setter
    def authorization_update_list(self, authorization_update_list):
        """Sets the authorization_update_list of this AuthorizationChange.

        List of medium authorizations to be updated  # noqa: E501

        :param authorization_update_list: The authorization_update_list of this AuthorizationChange.  # noqa: E501
        :type: list[Authorization]
        """
        if authorization_update_list is None:
            raise ValueError("Invalid value for `authorization_update_list`, must not be `None`")  # noqa: E501

        self._authorization_update_list = authorization_update_list

    @property
    def push_message(self):
        """Gets the push_message of this AuthorizationChange.  # noqa: E501

        Notification text that will be shown on the phone for new/changed authorizations. Default text will be used if not set.  # noqa: E501

        :return: The push_message of this AuthorizationChange.  # noqa: E501
        :rtype: str
        """
        return self._push_message

    @push_message.setter
    def push_message(self, push_message):
        """Sets the push_message of this AuthorizationChange.

        Notification text that will be shown on the phone for new/changed authorizations. Default text will be used if not set.  # noqa: E501

        :param push_message: The push_message of this AuthorizationChange.  # noqa: E501
        :type: str
        """

        self._push_message = push_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorizationChange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorizationChange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
