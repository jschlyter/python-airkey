# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from airkey.models.medium import Medium  # noqa: F401,E501

class Phone(Medium):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'medium_type': 'str',
        'app_type': 'str',
        'platform_version': 'str',
        'phone_settings': 'PhoneSettings',
        'pairing_code': 'str',
        'pairing_code_valid_until': 'str',
        'phone_number': 'str',
        'sent_key_on': 'str'
    }
    if hasattr(Medium, "swagger_types"):
        swagger_types.update(Medium.swagger_types)

    attribute_map = {
        'medium_type': 'mediumType',
        'app_type': 'appType',
        'platform_version': 'platformVersion',
        'phone_settings': 'phoneSettings',
        'pairing_code': 'pairingCode',
        'pairing_code_valid_until': 'pairingCodeValidUntil',
        'phone_number': 'phoneNumber',
        'sent_key_on': 'sentKeyOn'
    }
    if hasattr(Medium, "attribute_map"):
        attribute_map.update(Medium.attribute_map)

    def __init__(self, medium_type=None, app_type=None, platform_version=None, phone_settings=None, pairing_code=None, pairing_code_valid_until=None, phone_number=None, sent_key_on=None, *args, **kwargs):  # noqa: E501
        """Phone - a model defined in Swagger"""  # noqa: E501
        self._medium_type = None
        self._app_type = None
        self._platform_version = None
        self._phone_settings = None
        self._pairing_code = None
        self._pairing_code_valid_until = None
        self._phone_number = None
        self._sent_key_on = None
        self.discriminator = None
        if medium_type is not None:
            self.medium_type = medium_type
        if app_type is not None:
            self.app_type = app_type
        if platform_version is not None:
            self.platform_version = platform_version
        self.phone_settings = phone_settings
        if pairing_code is not None:
            self.pairing_code = pairing_code
        if pairing_code_valid_until is not None:
            self.pairing_code_valid_until = pairing_code_valid_until
        self.phone_number = phone_number
        if sent_key_on is not None:
            self.sent_key_on = sent_key_on
        Medium.__init__(self, *args, **kwargs)

    @property
    def medium_type(self):
        """Gets the medium_type of this Phone.  # noqa: E501

        Phone type of the medium  # noqa: E501

        :return: The medium_type of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._medium_type

    @medium_type.setter
    def medium_type(self, medium_type):
        """Sets the medium_type of this Phone.

        Phone type of the medium  # noqa: E501

        :param medium_type: The medium_type of this Phone.  # noqa: E501
        :type: str
        """
        allowed_values = ["PHONE"]  # noqa: E501
        if medium_type not in allowed_values:
            raise ValueError(
                "Invalid value for `medium_type` ({0}), must be one of {1}"  # noqa: E501
                .format(medium_type, allowed_values)
            )

        self._medium_type = medium_type

    @property
    def app_type(self):
        """Gets the app_type of this Phone.  # noqa: E501

        Type of the used app  # noqa: E501

        :return: The app_type of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this Phone.

        Type of the used app  # noqa: E501

        :param app_type: The app_type of this Phone.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANDROID", "BLACKBERRY", "IPHONE", "WINDOWS_PHONE"]  # noqa: E501
        if app_type not in allowed_values:
            raise ValueError(
                "Invalid value for `app_type` ({0}), must be one of {1}"  # noqa: E501
                .format(app_type, allowed_values)
            )

        self._app_type = app_type

    @property
    def platform_version(self):
        """Gets the platform_version of this Phone.  # noqa: E501

        Current version of the platform  # noqa: E501

        :return: The platform_version of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this Phone.

        Current version of the platform  # noqa: E501

        :param platform_version: The platform_version of this Phone.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def phone_settings(self):
        """Gets the phone_settings of this Phone.  # noqa: E501


        :return: The phone_settings of this Phone.  # noqa: E501
        :rtype: PhoneSettings
        """
        return self._phone_settings

    @phone_settings.setter
    def phone_settings(self, phone_settings):
        """Sets the phone_settings of this Phone.


        :param phone_settings: The phone_settings of this Phone.  # noqa: E501
        :type: PhoneSettings
        """
        if phone_settings is None:
            raise ValueError("Invalid value for `phone_settings`, must not be `None`")  # noqa: E501

        self._phone_settings = phone_settings

    @property
    def pairing_code(self):
        """Gets the pairing_code of this Phone.  # noqa: E501

        Generated pairing code  # noqa: E501

        :return: The pairing_code of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._pairing_code

    @pairing_code.setter
    def pairing_code(self, pairing_code):
        """Sets the pairing_code of this Phone.

        Generated pairing code  # noqa: E501

        :param pairing_code: The pairing_code of this Phone.  # noqa: E501
        :type: str
        """

        self._pairing_code = pairing_code

    @property
    def pairing_code_valid_until(self):
        """Gets the pairing_code_valid_until of this Phone.  # noqa: E501

        Timestamp until when the pairing code is valid (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :return: The pairing_code_valid_until of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._pairing_code_valid_until

    @pairing_code_valid_until.setter
    def pairing_code_valid_until(self, pairing_code_valid_until):
        """Sets the pairing_code_valid_until of this Phone.

        Timestamp until when the pairing code is valid (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :param pairing_code_valid_until: The pairing_code_valid_until of this Phone.  # noqa: E501
        :type: str
        """

        self._pairing_code_valid_until = pairing_code_valid_until

    @property
    def phone_number(self):
        """Gets the phone_number of this Phone.  # noqa: E501

        Phone number of the phone starting with '+' followed by 1-49 digits (incl. possible spaces), e.g. +436641234567  # noqa: E501

        :return: The phone_number of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Phone.

        Phone number of the phone starting with '+' followed by 1-49 digits (incl. possible spaces), e.g. +436641234567  # noqa: E501

        :param phone_number: The phone_number of this Phone.  # noqa: E501
        :type: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")  # noqa: E501

        self._phone_number = phone_number

    @property
    def sent_key_on(self):
        """Gets the sent_key_on of this Phone.  # noqa: E501

        Timestamp when the pairing code was sent to the phone (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :return: The sent_key_on of this Phone.  # noqa: E501
        :rtype: str
        """
        return self._sent_key_on

    @sent_key_on.setter
    def sent_key_on(self, sent_key_on):
        """Sets the sent_key_on of this Phone.

        Timestamp when the pairing code was sent to the phone (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)  # noqa: E501

        :param sent_key_on: The sent_key_on of this Phone.  # noqa: E501
        :type: str
        """

        self._sent_key_on = sent_key_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Phone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Phone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
