# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from airkey.models.medium import Medium  # noqa: F401,E501

class Card(Medium):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'medium_type': 'str',
        'card_uid': 'str'
    }
    if hasattr(Medium, "swagger_types"):
        swagger_types.update(Medium.swagger_types)

    attribute_map = {
        'medium_type': 'mediumType',
        'card_uid': 'cardUid'
    }
    if hasattr(Medium, "attribute_map"):
        attribute_map.update(Medium.attribute_map)

    def __init__(self, medium_type=None, card_uid=None, *args, **kwargs):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        self._medium_type = None
        self._card_uid = None
        self.discriminator = None
        if medium_type is not None:
            self.medium_type = medium_type
        if card_uid is not None:
            self.card_uid = card_uid
        Medium.__init__(self, *args, **kwargs)

    @property
    def medium_type(self):
        """Gets the medium_type of this Card.  # noqa: E501

        Card type of the medium  # noqa: E501

        :return: The medium_type of this Card.  # noqa: E501
        :rtype: str
        """
        return self._medium_type

    @medium_type.setter
    def medium_type(self, medium_type):
        """Sets the medium_type of this Card.

        Card type of the medium  # noqa: E501

        :param medium_type: The medium_type of this Card.  # noqa: E501
        :type: str
        """
        allowed_values = ["CARD"]  # noqa: E501
        if medium_type not in allowed_values:
            raise ValueError(
                "Invalid value for `medium_type` ({0}), must be one of {1}"  # noqa: E501
                .format(medium_type, allowed_values)
            )

        self._medium_type = medium_type

    @property
    def card_uid(self):
        """Gets the card_uid of this Card.  # noqa: E501

        ISO/IEC 14443 UID of the card  # noqa: E501

        :return: The card_uid of this Card.  # noqa: E501
        :rtype: str
        """
        return self._card_uid

    @card_uid.setter
    def card_uid(self, card_uid):
        """Sets the card_uid of this Card.

        ISO/IEC 14443 UID of the card  # noqa: E501

        :param card_uid: The card_uid of this Card.  # noqa: E501
        :type: str
        """

        self._card_uid = card_uid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
