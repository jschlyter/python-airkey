# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'temporal_credit_end_of_validity': 'str',
        'quantity_credits_amount': 'int'
    }

    attribute_map = {
        'temporal_credit_end_of_validity': 'temporalCreditEndOfValidity',
        'quantity_credits_amount': 'quantityCreditsAmount'
    }

    def __init__(self, temporal_credit_end_of_validity=None, quantity_credits_amount=None):  # noqa: E501
        """CreditInfo - a model defined in Swagger"""  # noqa: E501
        self._temporal_credit_end_of_validity = None
        self._quantity_credits_amount = None
        self.discriminator = None
        if temporal_credit_end_of_validity is not None:
            self.temporal_credit_end_of_validity = temporal_credit_end_of_validity
        if quantity_credits_amount is not None:
            self.quantity_credits_amount = quantity_credits_amount

    @property
    def temporal_credit_end_of_validity(self):
        """Gets the temporal_credit_end_of_validity of this CreditInfo.  # noqa: E501

        Timestamp of temporal credit validity expiration (ISO 8601-format compliant date with time in UTC, milliseconds precision)  # noqa: E501

        :return: The temporal_credit_end_of_validity of this CreditInfo.  # noqa: E501
        :rtype: str
        """
        return self._temporal_credit_end_of_validity

    @temporal_credit_end_of_validity.setter
    def temporal_credit_end_of_validity(self, temporal_credit_end_of_validity):
        """Sets the temporal_credit_end_of_validity of this CreditInfo.

        Timestamp of temporal credit validity expiration (ISO 8601-format compliant date with time in UTC, milliseconds precision)  # noqa: E501

        :param temporal_credit_end_of_validity: The temporal_credit_end_of_validity of this CreditInfo.  # noqa: E501
        :type: str
        """

        self._temporal_credit_end_of_validity = temporal_credit_end_of_validity

    @property
    def quantity_credits_amount(self):
        """Gets the quantity_credits_amount of this CreditInfo.  # noqa: E501

        Available amount of credits  # noqa: E501

        :return: The quantity_credits_amount of this CreditInfo.  # noqa: E501
        :rtype: int
        """
        return self._quantity_credits_amount

    @quantity_credits_amount.setter
    def quantity_credits_amount(self, quantity_credits_amount):
        """Sets the quantity_credits_amount of this CreditInfo.

        Available amount of credits  # noqa: E501

        :param quantity_credits_amount: The quantity_credits_amount of this CreditInfo.  # noqa: E501
        :type: int
        """

        self._quantity_credits_amount = quantity_credits_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
