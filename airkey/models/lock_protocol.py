# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LockProtocol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lock': 'SimpleLock',
        'lock_protocol': 'LockProtocolEntry'
    }

    attribute_map = {
        'lock': 'lock',
        'lock_protocol': 'lockProtocol'
    }

    def __init__(self, lock=None, lock_protocol=None):  # noqa: E501
        """LockProtocol - a model defined in Swagger"""  # noqa: E501
        self._lock = None
        self._lock_protocol = None
        self.discriminator = None
        if lock is not None:
            self.lock = lock
        if lock_protocol is not None:
            self.lock_protocol = lock_protocol

    @property
    def lock(self):
        """Gets the lock of this LockProtocol.  # noqa: E501


        :return: The lock of this LockProtocol.  # noqa: E501
        :rtype: SimpleLock
        """
        return self._lock

    @lock.setter
    def lock(self, lock):
        """Sets the lock of this LockProtocol.


        :param lock: The lock of this LockProtocol.  # noqa: E501
        :type: SimpleLock
        """

        self._lock = lock

    @property
    def lock_protocol(self):
        """Gets the lock_protocol of this LockProtocol.  # noqa: E501


        :return: The lock_protocol of this LockProtocol.  # noqa: E501
        :rtype: LockProtocolEntry
        """
        return self._lock_protocol

    @lock_protocol.setter
    def lock_protocol(self, lock_protocol):
        """Sets the lock_protocol of this LockProtocol.


        :param lock_protocol: The lock_protocol of this LockProtocol.  # noqa: E501
        :type: LockProtocolEntry
        """

        self._lock_protocol = lock_protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LockProtocol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LockProtocol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
