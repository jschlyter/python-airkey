# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from airkey.api_client import ApiClient


class LocksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_lock(self, lock_id, **kwargs):  # noqa: E501
        """Gets information of a specific lock.  # noqa: E501

        Returns a specific lock with its information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lock(lock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int lock_id: Unique identifier of the lock (required)
        :return: Lock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lock_with_http_info(lock_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lock_with_http_info(lock_id, **kwargs)  # noqa: E501
            return data

    def get_lock_with_http_info(self, lock_id, **kwargs):  # noqa: E501
        """Gets information of a specific lock.  # noqa: E501

        Returns a specific lock with its information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lock_with_http_info(lock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int lock_id: Unique identifier of the lock (required)
        :return: Lock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lock_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lock_id' is set
        if ('lock_id' not in params or
                params['lock_id'] is None):
            raise ValueError("Missing the required parameter `lock_id` when calling `get_lock`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lock_id' in params:
            path_params['lockId'] = params['lock_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/locks/{lockId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_locks(self, **kwargs):  # noqa: E501
        """Gets information of all locks.  # noqa: E501

        Returns a list of all locks with their information, sorted by lock id in ascending order. Maintenance tasks of a lock can be determined by using the maintenance-tasks resource (with lockId as query parameter for a single lock).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :param int calendar_id: Filter locks by holiday calendar id
        :param int locking_system_id: Filter locks by technical identifier lockingSystemId
        :return: LockPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_locks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_locks_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_locks_with_http_info(self, **kwargs):  # noqa: E501
        """Gets information of all locks.  # noqa: E501

        Returns a list of all locks with their information, sorted by lock id in ascending order. Maintenance tasks of a lock can be determined by using the maintenance-tasks resource (with lockId as query parameter for a single lock).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :param int calendar_id: Filter locks by holiday calendar id
        :param int locking_system_id: Filter locks by technical identifier lockingSystemId
        :return: LockPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'calendar_id', 'locking_system_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'calendar_id' in params:
            query_params.append(('calendarId', params['calendar_id']))  # noqa: E501
        if 'locking_system_id' in params:
            query_params.append(('lockingSystemId', params['locking_system_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/locks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LockPagingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_lock(self, body, lock_id, **kwargs):  # noqa: E501
        """Updates the provided lock.  # noqa: E501

        Updates the provided lock and returns the new version of the lock object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lock(body, lock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Lock body: Lock to be updated (required)
        :param int lock_id: Unique identifier of the lock (required)
        :return: Lock
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_lock_with_http_info(body, lock_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_lock_with_http_info(body, lock_id, **kwargs)  # noqa: E501
            return data

    def update_lock_with_http_info(self, body, lock_id, **kwargs):  # noqa: E501
        """Updates the provided lock.  # noqa: E501

        Updates the provided lock and returns the new version of the lock object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_lock_with_http_info(body, lock_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Lock body: Lock to be updated (required)
        :param int lock_id: Unique identifier of the lock (required)
        :return: Lock
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'lock_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_lock" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_lock`")  # noqa: E501
        # verify the required parameter 'lock_id' is set
        if ('lock_id' not in params or
                params['lock_id'] is None):
            raise ValueError("Missing the required parameter `lock_id` when calling `update_lock`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lock_id' in params:
            path_params['lockId'] = params['lock_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/locks/{lockId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lock',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
