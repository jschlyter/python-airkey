# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from airkey.api_client import ApiClient


class MediaApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_owner_to_medium(self, body, **kwargs):  # noqa: E501
        """Assigns a person to a medium for each provided assignment.  # noqa: E501

        Creates a person assignment for a medium according to the provided list of assignments and returns the resulting assignment list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_owner_to_medium(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MediumAssignment] body: List of medium assignments (required)
        :return: list[MediumAssignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_owner_to_medium_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_owner_to_medium_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def assign_owner_to_medium_with_http_info(self, body, **kwargs):  # noqa: E501
        """Assigns a person to a medium for each provided assignment.  # noqa: E501

        Creates a person assignment for a medium according to the provided list of assignments and returns the resulting assignment list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_owner_to_medium_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[MediumAssignment] body: List of medium assignments (required)
        :return: list[MediumAssignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_owner_to_medium" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `assign_owner_to_medium`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/assign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediumAssignment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_medium_assignments(self, body, **kwargs):  # noqa: E501
        """Cancels assignments of media.  # noqa: E501

        Cancels the person assignments of the provided list of media and returns a list of identifiers of the updated medium objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_medium_assignments(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: List of unique medium identifiers (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_medium_assignments_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_medium_assignments_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cancel_medium_assignments_with_http_info(self, body, **kwargs):  # noqa: E501
        """Cancels assignments of media.  # noqa: E501

        Cancels the person assignments of the provided list of media and returns a list of identifiers of the updated medium objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_medium_assignments_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: List of unique medium identifiers (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_medium_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cancel_medium_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/cancel-assignment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_phones(self, body, **kwargs):  # noqa: E501
        """Adds list of new phones.  # noqa: E501

        Creates and adds the provided phones to the access control system and returns a list of the new phone objects. Please check before if a phone already exists with the given phone number to prevent duplicates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phones(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PhoneCreate] body: List of phones to be added (required)
        :return: list[Phone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_phones_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_phones_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_phones_with_http_info(self, body, **kwargs):  # noqa: E501
        """Adds list of new phones.  # noqa: E501

        Creates and adds the provided phones to the access control system and returns a list of the new phone objects. Please check before if a phone already exists with the given phone number to prevent duplicates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phones_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[PhoneCreate] body: List of phones to be added (required)
        :return: list[Phone]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_phones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_phones`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Phone]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_medium(self, medium_id, reason, **kwargs):  # noqa: E501
        """Deactivates provided medium.  # noqa: E501

        Deactivates the provided medium and returns a new version of the medium object. The fields \"reason\" and \"comment\" are saved in the system protocol and are not part of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_medium(medium_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium to be deactivated (required)
        :param str reason: Reason of deactivation (user defined input that can be used to describe the reasons for deactivating a medium, e.g. has been lost / was stolen / is broken) (required)
        :param str comment: Additional comment of deactivation (user defined input that can be used to add further details regarding the reason for deactivating a medium, e.g. when all details won't fit within the reason field)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_medium_with_http_info(medium_id, reason, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_medium_with_http_info(medium_id, reason, **kwargs)  # noqa: E501
            return data

    def deactivate_medium_with_http_info(self, medium_id, reason, **kwargs):  # noqa: E501
        """Deactivates provided medium.  # noqa: E501

        Deactivates the provided medium and returns a new version of the medium object. The fields \"reason\" and \"comment\" are saved in the system protocol and are not part of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_medium_with_http_info(medium_id, reason, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium to be deactivated (required)
        :param str reason: Reason of deactivation (user defined input that can be used to describe the reasons for deactivating a medium, e.g. has been lost / was stolen / is broken) (required)
        :param str comment: Additional comment of deactivation (user defined input that can be used to add further details regarding the reason for deactivating a medium, e.g. when all details won't fit within the reason field)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['medium_id', 'reason', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_medium" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'medium_id' is set
        if ('medium_id' not in params or
                params['medium_id'] is None):
            raise ValueError("Missing the required parameter `medium_id` when calling `deactivate_medium`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if ('reason' not in params or
                params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `deactivate_medium`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'medium_id' in params:
            path_params['mediumId'] = params['medium_id']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/{mediumId}/deactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Medium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_phones(self, body, **kwargs):  # noqa: E501
        """Deletes provided phones.  # noqa: E501

        Deletes the provided phones and returns a list of identifiers of all deleted objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phones(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: List of unique identifiers of all phones to be deleted (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_phones_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_phones_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_phones_with_http_info(self, body, **kwargs):  # noqa: E501
        """Deletes provided phones.  # noqa: E501

        Deletes the provided phones and returns a list of identifiers of all deleted objects.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phones_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] body: List of unique identifiers of all phones to be deleted (required)
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_phones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_phones`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def empty_medium(self, medium_id, **kwargs):  # noqa: E501
        """Empties provided medium.  # noqa: E501

        Empties the provided medium and returns a new version of the medium object. All authorizations will be deleted from the medium. The person assignment of the medium does not get cancelled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.empty_medium(medium_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium (required)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.empty_medium_with_http_info(medium_id, **kwargs)  # noqa: E501
        else:
            (data) = self.empty_medium_with_http_info(medium_id, **kwargs)  # noqa: E501
            return data

    def empty_medium_with_http_info(self, medium_id, **kwargs):  # noqa: E501
        """Empties provided medium.  # noqa: E501

        Empties the provided medium and returns a new version of the medium object. All authorizations will be deleted from the medium. The person assignment of the medium does not get cancelled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.empty_medium_with_http_info(medium_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium (required)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['medium_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method empty_medium" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'medium_id' is set
        if ('medium_id' not in params or
                params['medium_id'] is None):
            raise ValueError("Missing the required parameter `medium_id` when calling `empty_medium`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'medium_id' in params:
            path_params['mediumId'] = params['medium_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/{mediumId}/empty', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Medium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def generate_pairing_code_for_phone(self, phone_id, **kwargs):  # noqa: E501
        """Generates a new pairing code for a phone.  # noqa: E501

        Generates a new pairing code for the provided phone and returns a new version of the phone object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pairing_code_for_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_pairing_code_for_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.generate_pairing_code_for_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def generate_pairing_code_for_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Generates a new pairing code for a phone.  # noqa: E501

        Generates a new pairing code for the provided phone and returns a new version of the phone object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pairing_code_for_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_pairing_code_for_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `generate_pairing_code_for_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones/{phoneId}/pairing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Phone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_card(self, card_id, **kwargs):  # noqa: E501
        """Gets information of specific card.  # noqa: E501

        Returns all information of provided medium of type 'card'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int card_id: Unique identifier of the card (required)
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_card_with_http_info(card_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_card_with_http_info(card_id, **kwargs)  # noqa: E501
            return data

    def get_card_with_http_info(self, card_id, **kwargs):  # noqa: E501
        """Gets information of specific card.  # noqa: E501

        Returns all information of provided medium of type 'card'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_card_with_http_info(card_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int card_id: Unique identifier of the card (required)
        :return: Card
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['card_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_card" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'card_id' is set
        if ('card_id' not in params or
                params['card_id'] is None):
            raise ValueError("Missing the required parameter `card_id` when calling `get_card`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'card_id' in params:
            path_params['cardId'] = params['card_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/cards/{cardId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Card',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cards(self, **kwargs):  # noqa: E501
        """Gets information of all cards.  # noqa: E501

        Returns a list of all media of type 'card' defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Filter cards by person id
        :param int locking_system_id: Filter cards by technical identifier lockingSystemId
        :param str assignment_status: Filter cards by assignment status
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: CardPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cards_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cards_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cards_with_http_info(self, **kwargs):  # noqa: E501
        """Gets information of all cards.  # noqa: E501

        Returns a list of all media of type 'card' defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cards_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Filter cards by person id
        :param int locking_system_id: Filter cards by technical identifier lockingSystemId
        :param str assignment_status: Filter cards by assignment status
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: CardPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'locking_system_id', 'assignment_status', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cards" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'locking_system_id' in params:
            query_params.append(('lockingSystemId', params['locking_system_id']))  # noqa: E501
        if 'assignment_status' in params:
            query_params.append(('assignmentStatus', params['assignment_status']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/cards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CardPagingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_media(self, **kwargs):  # noqa: E501
        """Gets information of all media.  # noqa: E501

        Returns a list of all media defined in the access control system, sorted by medium id in ascending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Filter media by person id
        :param int locking_system_id: Filter media by technical identifier lockingSystemId
        :param str assignment_status: Filter media by assignment status
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: MediumPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_media_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_media_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_media_with_http_info(self, **kwargs):  # noqa: E501
        """Gets information of all media.  # noqa: E501

        Returns a list of all media defined in the access control system, sorted by medium id in ascending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_media_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Filter media by person id
        :param int locking_system_id: Filter media by technical identifier lockingSystemId
        :param str assignment_status: Filter media by assignment status
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: MediumPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'locking_system_id', 'assignment_status', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_media" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'locking_system_id' in params:
            query_params.append(('lockingSystemId', params['locking_system_id']))  # noqa: E501
        if 'assignment_status' in params:
            query_params.append(('assignmentStatus', params['assignment_status']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MediumPagingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_medium(self, medium_id, **kwargs):  # noqa: E501
        """Gets information of a specific medium.  # noqa: E501

        Returns all information of a specific medium defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_medium(medium_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium (required)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_medium_with_http_info(medium_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_medium_with_http_info(medium_id, **kwargs)  # noqa: E501
            return data

    def get_medium_with_http_info(self, medium_id, **kwargs):  # noqa: E501
        """Gets information of a specific medium.  # noqa: E501

        Returns all information of a specific medium defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_medium_with_http_info(medium_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium (required)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['medium_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_medium" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'medium_id' is set
        if ('medium_id' not in params or
                params['medium_id'] is None):
            raise ValueError("Missing the required parameter `medium_id` when calling `get_medium`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'medium_id' in params:
            path_params['mediumId'] = params['medium_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/{mediumId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Medium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phone(self, phone_id, **kwargs):  # noqa: E501
        """Gets information of specific phone.  # noqa: E501

        Returns all information of provided medium of type 'phone'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def get_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Gets information of specific phone.  # noqa: E501

        Returns all information of provided medium of type 'phone'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `get_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones/{phoneId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Phone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phones(self, **kwargs):  # noqa: E501
        """Gets information of all phones.  # noqa: E501

        Returns a list of all media of type 'phone' defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phones(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Filter phones by person id
        :param int locking_system_id: Filter phones by technical identifier lockingSystemId
        :param str assignment_status: Filter phones by assignment status
        :param str phone_number: Filter phones by phone number
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: PhonePagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phones_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_phones_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_phones_with_http_info(self, **kwargs):  # noqa: E501
        """Gets information of all phones.  # noqa: E501

        Returns a list of all media of type 'phone' defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phones_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int person_id: Filter phones by person id
        :param int locking_system_id: Filter phones by technical identifier lockingSystemId
        :param str assignment_status: Filter phones by assignment status
        :param str phone_number: Filter phones by phone number
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: PhonePagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['person_id', 'locking_system_id', 'assignment_status', 'phone_number', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501
        if 'locking_system_id' in params:
            query_params.append(('lockingSystemId', params['locking_system_id']))  # noqa: E501
        if 'assignment_status' in params:
            query_params.append(('assignmentStatus', params['assignment_status']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phoneNumber', params['phone_number']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhonePagingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reactivate_medium(self, medium_id, reason, recover_authorizations, **kwargs):  # noqa: E501
        """Reactivates provided medium.  # noqa: E501

        Reactivates the provided medium and returns a new version of the medium object. The fields \"reason\" and \"comment\" are saved in the system protocol and are not part of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reactivate_medium(medium_id, reason, recover_authorizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium to be reactivated (required)
        :param str reason: Reason of reactivation (user defined input that can be used to describe the reasons for reactivating a medium, e.g. a medium has been found again) (required)
        :param bool recover_authorizations: Recover authorizations available prior to deactivation (required)
        :param str comment: Additional comment of reactivation (user defined input that can be used to add further details regarding the reason for reactivating a medium, e.g. when all details won't fit within the reason field)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reactivate_medium_with_http_info(medium_id, reason, recover_authorizations, **kwargs)  # noqa: E501
        else:
            (data) = self.reactivate_medium_with_http_info(medium_id, reason, recover_authorizations, **kwargs)  # noqa: E501
            return data

    def reactivate_medium_with_http_info(self, medium_id, reason, recover_authorizations, **kwargs):  # noqa: E501
        """Reactivates provided medium.  # noqa: E501

        Reactivates the provided medium and returns a new version of the medium object. The fields \"reason\" and \"comment\" are saved in the system protocol and are not part of the response.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reactivate_medium_with_http_info(medium_id, reason, recover_authorizations, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int medium_id: Unique identifier of the medium to be reactivated (required)
        :param str reason: Reason of reactivation (user defined input that can be used to describe the reasons for reactivating a medium, e.g. a medium has been found again) (required)
        :param bool recover_authorizations: Recover authorizations available prior to deactivation (required)
        :param str comment: Additional comment of reactivation (user defined input that can be used to add further details regarding the reason for reactivating a medium, e.g. when all details won't fit within the reason field)
        :return: Medium
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['medium_id', 'reason', 'recover_authorizations', 'comment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reactivate_medium" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'medium_id' is set
        if ('medium_id' not in params or
                params['medium_id'] is None):
            raise ValueError("Missing the required parameter `medium_id` when calling `reactivate_medium`")  # noqa: E501
        # verify the required parameter 'reason' is set
        if ('reason' not in params or
                params['reason'] is None):
            raise ValueError("Missing the required parameter `reason` when calling `reactivate_medium`")  # noqa: E501
        # verify the required parameter 'recover_authorizations' is set
        if ('recover_authorizations' not in params or
                params['recover_authorizations'] is None):
            raise ValueError("Missing the required parameter `recover_authorizations` when calling `reactivate_medium`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'medium_id' in params:
            path_params['mediumId'] = params['medium_id']  # noqa: E501

        query_params = []
        if 'reason' in params:
            query_params.append(('reason', params['reason']))  # noqa: E501
        if 'comment' in params:
            query_params.append(('comment', params['comment']))  # noqa: E501
        if 'recover_authorizations' in params:
            query_params.append(('recoverAuthorizations', params['recover_authorizations']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/{mediumId}/reactivate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Medium',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_pin_of_phone(self, phone_id, **kwargs):  # noqa: E501
        """Resets PIN of the phone.  # noqa: E501

        Resets the PIN of the provided phone and returns new version of the phone object with set PIN reset time. After the phone was synchronized the PIN flag is reset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_pin_of_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone to reset the PIN (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_pin_of_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_pin_of_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def reset_pin_of_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Resets PIN of the phone.  # noqa: E501

        Resets the PIN of the provided phone and returns new version of the phone object with set PIN reset time. After the phone was synchronized the PIN flag is reset.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_pin_of_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone to reset the PIN (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_pin_of_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `reset_pin_of_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones/{phoneId}/pin-reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Phone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_registration_code_to_phone(self, phone_id, **kwargs):  # noqa: E501
        """Sends pairing code to phone while the SMS text to be sent can be configured.  # noqa: E501

        Sends a generated pairing code per SMS to the phone and returns a new version of the phone object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_registration_code_to_phone(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :param SendRegistrationCodeRequest body: Send registration code request wrapper
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_registration_code_to_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_registration_code_to_phone_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def send_registration_code_to_phone_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Sends pairing code to phone while the SMS text to be sent can be configured.  # noqa: E501

        Sends a generated pairing code per SMS to the phone and returns a new version of the phone object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_registration_code_to_phone_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :param SendRegistrationCodeRequest body: Send registration code request wrapper
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_registration_code_to_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `send_registration_code_to_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones/{phoneId}/send-registration-code-with-parameters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Phone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def send_registration_code_to_phone1(self, phone_id, **kwargs):  # noqa: E501
        """Sends pairing code to phone.  # noqa: E501

        Sends a generated pairing code per SMS to the phone and returns a new version of the phone object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_registration_code_to_phone1(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.send_registration_code_to_phone1_with_http_info(phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.send_registration_code_to_phone1_with_http_info(phone_id, **kwargs)  # noqa: E501
            return data

    def send_registration_code_to_phone1_with_http_info(self, phone_id, **kwargs):  # noqa: E501
        """Sends pairing code to phone.  # noqa: E501

        Sends a generated pairing code per SMS to the phone and returns a new version of the phone object.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.send_registration_code_to_phone1_with_http_info(phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int phone_id: Unique identifier of the phone (required)
        :return: Phone
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method send_registration_code_to_phone1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_id' is set
        if ('phone_id' not in params or
                params['phone_id'] is None):
            raise ValueError("Missing the required parameter `phone_id` when calling `send_registration_code_to_phone1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_id' in params:
            path_params['phoneId'] = params['phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones/{phoneId}/send-registration-code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Phone',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cards(self, body, **kwargs):  # noqa: E501
        """Updates list of cards.  # noqa: E501

        Updates the provided list of cards and returns a list of new object versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cards(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Card] body: List of cards to be updated (required)
        :return: list[Card]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cards_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cards_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_cards_with_http_info(self, body, **kwargs):  # noqa: E501
        """Updates list of cards.  # noqa: E501

        Updates the provided list of cards and returns a list of new object versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cards_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Card] body: List of cards to be updated (required)
        :return: list[Card]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_cards`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/cards', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Card]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_phones(self, body, **kwargs):  # noqa: E501
        """Updates list of phones.  # noqa: E501

        Updates the provided list of phones and returns a list of new object versions. Please check before if a phone already exists with the given phone number to prevent duplicates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_phones(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Phone] body: List of phones to be updated (required)
        :return: list[Phone]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_phones_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_phones_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_phones_with_http_info(self, body, **kwargs):  # noqa: E501
        """Updates list of phones.  # noqa: E501

        Updates the provided list of phones and returns a list of new object versions. Please check before if a phone already exists with the given phone number to prevent duplicates.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_phones_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[Phone] body: List of phones to be updated (required)
        :return: list[Phone]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_phones" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_phones`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/media/phones', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Phone]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
