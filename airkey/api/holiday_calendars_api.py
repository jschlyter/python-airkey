# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from airkey.api_client import ApiClient


class HolidayCalendarsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_holiday_calendar_slot(self, body, holiday_calendar_id, **kwargs):  # noqa: E501
        """Adds a new holiday calendar slot to the holiday calendar.  # noqa: E501

        Creates and adds the holiday calendar slot to the provided holiday calendar and returns the updated holiday calendar object version. In case of a series definition in the given holiday calendar slot, more than one holiday calendar slots could be created. To retrieve the newly created slots from the returned calendar, they can be filtered based on given slot name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_holiday_calendar_slot(body, holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendarSlotCreate body: Holiday calendar slot to be added (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot should be associated (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, **kwargs)  # noqa: E501
            return data

    def create_holiday_calendar_slot_with_http_info(self, body, holiday_calendar_id, **kwargs):  # noqa: E501
        """Adds a new holiday calendar slot to the holiday calendar.  # noqa: E501

        Creates and adds the holiday calendar slot to the provided holiday calendar and returns the updated holiday calendar object version. In case of a series definition in the given holiday calendar slot, more than one holiday calendar slots could be created. To retrieve the newly created slots from the returned calendar, they can be filtered based on given slot name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendarSlotCreate body: Holiday calendar slot to be added (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot should be associated (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'holiday_calendar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_holiday_calendar_slot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_holiday_calendar_slot`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `create_holiday_calendar_slot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}/slots', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_holiday_calendar_slot(self, body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs):  # noqa: E501
        """Deletes provided holiday calendar slot.  # noqa: E501

        Deletes the provided holiday calendar slot and returns the new holiday calendar object version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_holiday_calendar_slot(body, holiday_calendar_id, holiday_calendar_slot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendarSlotDelete body: Holiday calendar slot to be deleted (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot is associated (required)
        :param int holiday_calendar_slot_id: Unique identifier of the holiday calendar slot to be deleted (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs)  # noqa: E501
            return data

    def delete_holiday_calendar_slot_with_http_info(self, body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs):  # noqa: E501
        """Deletes provided holiday calendar slot.  # noqa: E501

        Deletes the provided holiday calendar slot and returns the new holiday calendar object version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, holiday_calendar_slot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendarSlotDelete body: Holiday calendar slot to be deleted (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot is associated (required)
        :param int holiday_calendar_slot_id: Unique identifier of the holiday calendar slot to be deleted (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'holiday_calendar_id', 'holiday_calendar_slot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_holiday_calendar_slot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_holiday_calendar_slot`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `delete_holiday_calendar_slot`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_slot_id' is set
        if ('holiday_calendar_slot_id' not in params or
                params['holiday_calendar_slot_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_slot_id` when calling `delete_holiday_calendar_slot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501
        if 'holiday_calendar_slot_id' in params:
            path_params['holidayCalendarSlotId'] = params['holiday_calendar_slot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}/slots/{holidayCalendarSlotId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_holiday_calendar(self, holiday_calendar_id, **kwargs):  # noqa: E501
        """Gets a specific holiday calendar.  # noqa: E501

        Returns information about a specific holiday calendar defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holiday_calendar(holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_calendar_id: Unique identifier of the holiday calendar (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_holiday_calendar_with_http_info(holiday_calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_holiday_calendar_with_http_info(holiday_calendar_id, **kwargs)  # noqa: E501
            return data

    def get_holiday_calendar_with_http_info(self, holiday_calendar_id, **kwargs):  # noqa: E501
        """Gets a specific holiday calendar.  # noqa: E501

        Returns information about a specific holiday calendar defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holiday_calendar_with_http_info(holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_calendar_id: Unique identifier of the holiday calendar (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['holiday_calendar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_holiday_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `get_holiday_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_holiday_calendar_slot(self, holiday_calendar_id, holiday_calendar_slot_id, **kwargs):  # noqa: E501
        """Gets a specific holiday calendar slot.  # noqa: E501

        Returns information about a specific holiday calendar slot of the holiday calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holiday_calendar_slot(holiday_calendar_id, holiday_calendar_slot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot is associated (required)
        :param int holiday_calendar_slot_id: Unique identifier of the holiday calendar slot (required)
        :return: HolidayCalendarSlot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_holiday_calendar_slot_with_http_info(holiday_calendar_id, holiday_calendar_slot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_holiday_calendar_slot_with_http_info(holiday_calendar_id, holiday_calendar_slot_id, **kwargs)  # noqa: E501
            return data

    def get_holiday_calendar_slot_with_http_info(self, holiday_calendar_id, holiday_calendar_slot_id, **kwargs):  # noqa: E501
        """Gets a specific holiday calendar slot.  # noqa: E501

        Returns information about a specific holiday calendar slot of the holiday calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holiday_calendar_slot_with_http_info(holiday_calendar_id, holiday_calendar_slot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot is associated (required)
        :param int holiday_calendar_slot_id: Unique identifier of the holiday calendar slot (required)
        :return: HolidayCalendarSlot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['holiday_calendar_id', 'holiday_calendar_slot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_holiday_calendar_slot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `get_holiday_calendar_slot`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_slot_id' is set
        if ('holiday_calendar_slot_id' not in params or
                params['holiday_calendar_slot_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_slot_id` when calling `get_holiday_calendar_slot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501
        if 'holiday_calendar_slot_id' in params:
            path_params['holidayCalendarSlotId'] = params['holiday_calendar_slot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}/slots/{holidayCalendarSlotId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendarSlot',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_holiday_calendars(self, **kwargs):  # noqa: E501
        """Gets all holiday calendars.  # noqa: E501

        Returns all available holiday calendars defined in the access control system, sorted by holiday calendar id in ascending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holiday_calendars(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HolidayCalendarList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_holiday_calendars_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_holiday_calendars_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_holiday_calendars_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all holiday calendars.  # noqa: E501

        Returns all available holiday calendars defined in the access control system, sorted by holiday calendar id in ascending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_holiday_calendars_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: HolidayCalendarList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_holiday_calendars" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendarList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_locks_by_calendar_id(self, holiday_calendar_id, **kwargs):  # noqa: E501
        """Gets all locks using the holiday calendar.  # noqa: E501

        Returns a list of all locks that are currently using the provided holiday calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locks_by_calendar_id(holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_calendar_id: Unique identifier of the holiday calendar (required)
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: LockPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_locks_by_calendar_id_with_http_info(holiday_calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_locks_by_calendar_id_with_http_info(holiday_calendar_id, **kwargs)  # noqa: E501
            return data

    def get_locks_by_calendar_id_with_http_info(self, holiday_calendar_id, **kwargs):  # noqa: E501
        """Gets all locks using the holiday calendar.  # noqa: E501

        Returns a list of all locks that are currently using the provided holiday calendar.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_locks_by_calendar_id_with_http_info(holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int holiday_calendar_id: Unique identifier of the holiday calendar (required)
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :return: LockPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['holiday_calendar_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_locks_by_calendar_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `get_locks_by_calendar_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}/locks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LockPagingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_holiday_calendar(self, body, holiday_calendar_id, **kwargs):  # noqa: E501
        """Updates the holiday calendar.  # noqa: E501

        Updates the provided holiday calendar and returns the new holiday calendar object version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_holiday_calendar(body, holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendar body: Holiday calendar to be updated (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar to be updated (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_holiday_calendar_with_http_info(body, holiday_calendar_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_holiday_calendar_with_http_info(body, holiday_calendar_id, **kwargs)  # noqa: E501
            return data

    def update_holiday_calendar_with_http_info(self, body, holiday_calendar_id, **kwargs):  # noqa: E501
        """Updates the holiday calendar.  # noqa: E501

        Updates the provided holiday calendar and returns the new holiday calendar object version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_holiday_calendar_with_http_info(body, holiday_calendar_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendar body: Holiday calendar to be updated (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar to be updated (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'holiday_calendar_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_holiday_calendar" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_holiday_calendar`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `update_holiday_calendar`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_holiday_calendar_slot(self, body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs):  # noqa: E501
        """Updates a holiday calendar slot of the holiday calendar.  # noqa: E501

        Updates the provided holiday calendar slot and returns the new holiday calendar object version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_holiday_calendar_slot(body, holiday_calendar_id, holiday_calendar_slot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendarSlotUpdate body: Holiday calendar slot to be updated (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot is associated (required)
        :param int holiday_calendar_slot_id: Unique identifier of the holiday calendar slot to be updated (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs)  # noqa: E501
            return data

    def update_holiday_calendar_slot_with_http_info(self, body, holiday_calendar_id, holiday_calendar_slot_id, **kwargs):  # noqa: E501
        """Updates a holiday calendar slot of the holiday calendar.  # noqa: E501

        Updates the provided holiday calendar slot and returns the new holiday calendar object version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_holiday_calendar_slot_with_http_info(body, holiday_calendar_id, holiday_calendar_slot_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param HolidayCalendarSlotUpdate body: Holiday calendar slot to be updated (required)
        :param int holiday_calendar_id: Unique identifier of the holiday calendar with which the holiday calendar slot is associated (required)
        :param int holiday_calendar_slot_id: Unique identifier of the holiday calendar slot to be updated (required)
        :return: HolidayCalendar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'holiday_calendar_id', 'holiday_calendar_slot_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_holiday_calendar_slot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_holiday_calendar_slot`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_id' is set
        if ('holiday_calendar_id' not in params or
                params['holiday_calendar_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_id` when calling `update_holiday_calendar_slot`")  # noqa: E501
        # verify the required parameter 'holiday_calendar_slot_id' is set
        if ('holiday_calendar_slot_id' not in params or
                params['holiday_calendar_slot_id'] is None):
            raise ValueError("Missing the required parameter `holiday_calendar_slot_id` when calling `update_holiday_calendar_slot`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'holiday_calendar_id' in params:
            path_params['holidayCalendarId'] = params['holiday_calendar_id']  # noqa: E501
        if 'holiday_calendar_slot_id' in params:
            path_params['holidayCalendarSlotId'] = params['holiday_calendar_slot_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/holiday-calendars/{holidayCalendarId}/slots/{holidayCalendarSlotId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='HolidayCalendar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
