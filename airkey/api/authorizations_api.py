# coding: utf-8

"""
    EVVA AirKey Cloud API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v16.20.7
    Contact: office-wien@evva.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from airkey.api_client import ApiClient


class AuthorizationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_or_fetch_simple_authorization(self, body, **kwargs):  # noqa: E501
        """Creates simple authorizations  # noqa: E501

        Creates an authorization of type 'SIMPLE' (same as using SimpleAuthorizationInfo in POST /authorizations/advanced). If an authorization can’t be created (e.g. already has 8 authorizations), an error will be returned. Be advised that this is only a simplified interface for fulfilling basic authorization needs, a 'SIMPLE' authorization will actually consist of up to 3 AuthorizationInfo elements combined (of type one-day and permanent) within an authorization -> authorization of type 'SIMPLE' will never be part of a response. <br/>The dates and timestamps for the authorizations should always be provided regardless of the time zone. <br/>Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_fetch_simple_authorization(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleAuthorizationCreate body: Authorization to be created (required)
        :return: Authorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_fetch_simple_authorization_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_fetch_simple_authorization_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_or_fetch_simple_authorization_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates simple authorizations  # noqa: E501

        Creates an authorization of type 'SIMPLE' (same as using SimpleAuthorizationInfo in POST /authorizations/advanced). If an authorization can’t be created (e.g. already has 8 authorizations), an error will be returned. Be advised that this is only a simplified interface for fulfilling basic authorization needs, a 'SIMPLE' authorization will actually consist of up to 3 AuthorizationInfo elements combined (of type one-day and permanent) within an authorization -> authorization of type 'SIMPLE' will never be part of a response. <br/>The dates and timestamps for the authorizations should always be provided regardless of the time zone. <br/>Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_fetch_simple_authorization_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SimpleAuthorizationCreate body: Authorization to be created (required)
        :return: Authorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_fetch_simple_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_fetch_simple_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/authorizations/simple', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Authorization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_or_update_authorizations_with_advanced_options(self, body, **kwargs):  # noqa: E501
        """Creates new and updates existing authorizations (advanced version - can be used to create/update all types of authorizations).  # noqa: E501

        Creates the provided authorizations to be added in the access control system, updates the provided existing authorizations and returns a list of the new authorization object versions. <br/> The dates and timestamps for the authorizations should always be provided regardless of the time zone. <br/>Create authorization: Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time. <br/>Update authorization: It's not possible to change a lockId/areaId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_authorizations_with_advanced_options(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationChange body: Authorizations to be created or updated (required)
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_or_update_authorizations_with_advanced_options_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_or_update_authorizations_with_advanced_options_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_or_update_authorizations_with_advanced_options_with_http_info(self, body, **kwargs):  # noqa: E501
        """Creates new and updates existing authorizations (advanced version - can be used to create/update all types of authorizations).  # noqa: E501

        Creates the provided authorizations to be added in the access control system, updates the provided existing authorizations and returns a list of the new authorization object versions. <br/> The dates and timestamps for the authorizations should always be provided regardless of the time zone. <br/>Create authorization: Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time. <br/>Update authorization: It's not possible to change a lockId/areaId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_or_update_authorizations_with_advanced_options_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuthorizationChange body: Authorizations to be created or updated (required)
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_authorizations_with_advanced_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_or_update_authorizations_with_advanced_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/authorizations/advanced', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Authorization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_authorization(self, body, **kwargs):  # noqa: E501
        """Requests deletion of provided authorizations.  # noqa: E501

        Requests and marks provided authorizations for deletion and returns a list of the new authorization object versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AuthorizationDelete] body: Authorizations to be deleted (required)
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_authorization_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_authorization_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_authorization_with_http_info(self, body, **kwargs):  # noqa: E501
        """Requests deletion of provided authorizations.  # noqa: E501

        Requests and marks provided authorizations for deletion and returns a list of the new authorization object versions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[AuthorizationDelete] body: Authorizations to be deleted (required)
        :return: list[Authorization]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/authorizations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Authorization]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorization(self, authorization_id, **kwargs):  # noqa: E501
        """Gets a specific authorization.  # noqa: E501

        Returns a specific authorization for locks and areas defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization(authorization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int authorization_id: Unique identifier of the authorization (required)
        :return: Authorization
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authorization_with_http_info(authorization_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authorization_with_http_info(authorization_id, **kwargs)  # noqa: E501
            return data

    def get_authorization_with_http_info(self, authorization_id, **kwargs):  # noqa: E501
        """Gets a specific authorization.  # noqa: E501

        Returns a specific authorization for locks and areas defined in the access control system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorization_with_http_info(authorization_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int authorization_id: Unique identifier of the authorization (required)
        :return: Authorization
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorization" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization_id' is set
        if ('authorization_id' not in params or
                params['authorization_id'] is None):
            raise ValueError("Missing the required parameter `authorization_id` when calling `get_authorization`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'authorization_id' in params:
            path_params['authorizationId'] = params['authorization_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/authorizations/{authorizationId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Authorization',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authorizations(self, **kwargs):  # noqa: E501
        """Gets all authorizations for locks and areas.  # noqa: E501

        Returns a list of all authorizations for locks and areas defined in the access control system, sorted by 'created on' timestamp in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorizations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :param int lock_id: Filter authorizations by lock id
        :param int area_id: Filter authorizations by area id
        :param int medium_id: Filter authorizations by medium id
        :param int person_id: Filter authorizations by person id
        :return: AuthorizationPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authorizations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_authorizations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_authorizations_with_http_info(self, **kwargs):  # noqa: E501
        """Gets all authorizations for locks and areas.  # noqa: E501

        Returns a list of all authorizations for locks and areas defined in the access control system, sorted by 'created on' timestamp in descending order.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authorizations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: Offset for paging
        :param int limit: Limit of result size
        :param int lock_id: Filter authorizations by lock id
        :param int area_id: Filter authorizations by area id
        :param int medium_id: Filter authorizations by medium id
        :param int person_id: Filter authorizations by person id
        :return: AuthorizationPagingList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'lock_id', 'area_id', 'medium_id', 'person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authorizations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'lock_id' in params:
            query_params.append(('lockId', params['lock_id']))  # noqa: E501
        if 'area_id' in params:
            query_params.append(('areaId', params['area_id']))  # noqa: E501
        if 'medium_id' in params:
            query_params.append(('mediumId', params['medium_id']))  # noqa: E501
        if 'person_id' in params:
            query_params.append(('personId', params['person_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['X-API-Key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/authorizations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthorizationPagingList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
