{
  "swagger" : "2.0",
  "info" : {
    "version" : "v16.20.7",
    "title" : "EVVA AirKey Cloud API",
    "termsOfService" : "https://www.evva.com/en/airkey/impressum/",
    "contact" : {
      "name" : "Contact",
      "url" : "https://airkey.evva.com",
      "email" : "office-wien@evva.com"
    },
    "license" : {
      "name" : "Legal Notice",
      "url" : "https://www.evva.com/en/airkey/impressum/"
    }
  },
  "host" : "integration.api.airkey.evva.com:443",
  "basePath" : "/cloud",
  "tags" : [ {
    "name" : "areas"
  }, {
    "name" : "authorizations"
  }, {
    "name" : "blacklists"
  }, {
    "name" : "credits"
  }, {
    "name" : "customer"
  }, {
    "name" : "events"
  }, {
    "name" : "holiday-calendars"
  }, {
    "name" : "lock-protocol"
  }, {
    "name" : "locks"
  }, {
    "name" : "maintenance-tasks"
  }, {
    "name" : "media"
  }, {
    "name" : "medium-protocol"
  }, {
    "name" : "persons"
  }, {
    "name" : "public-mgmt"
  }, {
    "name" : "send-a-key"
  }, {
    "name" : "system-protocol"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/v1/areas" : {
      "get" : {
        "tags" : [ "areas" ],
        "summary" : "Gets all available areas.",
        "description" : "Returns a list of all available areas defined in the access control system, sorted by area id in ascending order.",
        "operationId" : "getAreas",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "lockId",
          "in" : "query",
          "description" : "Filter areas by lock id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AreaPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/areas/{areaId}" : {
      "get" : {
        "tags" : [ "areas" ],
        "summary" : "Gets a specific area.",
        "description" : "Returns a specific area defined in the access control system.",
        "operationId" : "getArea",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "areaId",
          "in" : "path",
          "description" : "Unique identifier of the area",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Area"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Area not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/authorizations" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Gets all authorizations for locks and areas.",
        "description" : "Returns a list of all authorizations for locks and areas defined in the access control system, sorted by 'created on' timestamp in descending order.",
        "operationId" : "getAuthorizations",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "lockId",
          "in" : "query",
          "description" : "Filter authorizations by lock id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "areaId",
          "in" : "query",
          "description" : "Filter authorizations by area id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "mediumId",
          "in" : "query",
          "description" : "Filter authorizations by medium id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "personId",
          "in" : "query",
          "description" : "Filter authorizations by person id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/AuthorizationPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "authorizations" ],
        "summary" : "Requests deletion of provided authorizations.",
        "description" : "Requests and marks provided authorizations for deletion and returns a list of the new authorization object versions.",
        "operationId" : "deleteAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Authorizations to be deleted",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/AuthorizationDelete"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Authorization"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Authorization to be deleted not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/authorizations/advanced" : {
      "post" : {
        "tags" : [ "authorizations" ],
        "summary" : "Creates new and updates existing authorizations (advanced version - can be used to create/update all types of authorizations).",
        "description" : "Creates the provided authorizations to be added in the access control system, updates the provided existing authorizations and returns a list of the new authorization object versions. <br/> The dates and timestamps for the authorizations should always be provided regardless of the time zone. <br/>Create authorization: Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time. <br/>Update authorization: It's not possible to change a lockId/areaId",
        "operationId" : "createOrUpdateAuthorizationsWithAdvancedOptions",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Authorizations to be created or updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AuthorizationChange"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Authorization"
              }
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Authorization to be updated not found"
          },
          "409" : {
            "description" : "Authorization of medium for the provided lock/area already exists"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/authorizations/simple" : {
      "post" : {
        "tags" : [ "authorizations" ],
        "summary" : "Creates simple authorizations",
        "description" : "Creates an authorization of type 'SIMPLE' (same as using SimpleAuthorizationInfo in POST /authorizations/advanced). If an authorization can’t be created (e.g. already has 8 authorizations), an error will be returned. Be advised that this is only a simplified interface for fulfilling basic authorization needs, a 'SIMPLE' authorization will actually consist of up to 3 AuthorizationInfo elements combined (of type one-day and permanent) within an authorization -> authorization of type 'SIMPLE' will never be part of a response. <br/>The dates and timestamps for the authorizations should always be provided regardless of the time zone. <br/>Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time.",
        "operationId" : "createOrFetchSimpleAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Authorization to be created",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SimpleAuthorizationCreate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Authorization"
            }
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/authorizations/{authorizationId}" : {
      "get" : {
        "tags" : [ "authorizations" ],
        "summary" : "Gets a specific authorization.",
        "description" : "Returns a specific authorization for locks and areas defined in the access control system.",
        "operationId" : "getAuthorization",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "authorizationId",
          "in" : "path",
          "description" : "Unique identifier of the authorization",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Authorization"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Authorization not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/blacklists" : {
      "get" : {
        "tags" : [ "blacklists" ],
        "summary" : "Gets all available blacklist entries.",
        "description" : "Returns a list of all available blacklist entries defined in the access control system, sorted by lock id and medium id in ascending order.",
        "operationId" : "getBlacklists",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "lockId",
          "in" : "query",
          "description" : "Filter blacklist entries by lock id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "mediumId",
          "in" : "query",
          "description" : "Filter blacklist entries by medium id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/BlacklistEntry"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/credits" : {
      "get" : {
        "tags" : [ "credits" ],
        "summary" : "Gets available credit information.",
        "description" : "Returns information about available credits of customer.",
        "operationId" : "getCredits",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CreditInfo"
            }
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/customer" : {
      "get" : {
        "tags" : [ "customer" ],
        "summary" : "Gets customer details.",
        "description" : "Returns stored data of the customer.",
        "operationId" : "getCustomerData",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Gets a list of events.",
        "description" : "Returns a list of events (only returns events that are max. 7 days old), sorted by event creation timestamp in descending order. Integration environment: 7 day restriction is not enforced, use '2019-04-28T00:00Z' as 'createdAfter' query parameter to get all events.",
        "operationId" : "getEvents",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "createdAfter",
          "in" : "query",
          "description" : "Filter events that were created after this timestamp (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ). Query parameter is required because clients are encouraged to make a choice what data is actually needed (e.g. when polling this resource with an interval of 10 minutes: (createdAfter = now - 10 minutes) retrieves events which were created in the last 10 minutes.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter events by event type",
          "required" : false,
          "type" : "string",
          "enum" : [ "UNLOCKING", "APP_PAIRED", "AUTHORIZATION_SYNCHRONIZED" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/EventPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/events/{eventId}" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Gets a specific event.",
        "description" : "Returns information about a specific event.",
        "operationId" : "getEvent",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "eventId",
          "in" : "path",
          "description" : "Unique identifier of the event",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Event"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Event not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/holiday-calendars" : {
      "get" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Gets all holiday calendars.",
        "description" : "Returns all available holiday calendars defined in the access control system, sorted by holiday calendar id in ascending order.",
        "operationId" : "getHolidayCalendars",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendarList"
            }
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/holiday-calendars/{holidayCalendarId}" : {
      "get" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Gets a specific holiday calendar.",
        "description" : "Returns information about a specific holiday calendar defined in the access control system.",
        "operationId" : "getHolidayCalendar",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendar"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Updates the holiday calendar.",
        "description" : "Updates the provided holiday calendar and returns the new holiday calendar object version.",
        "operationId" : "updateHolidayCalendar",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar to be updated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holiday calendar to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HolidayCalendar"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendar"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/holiday-calendars/{holidayCalendarId}/locks" : {
      "get" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Gets all locks using the holiday calendar.",
        "description" : "Returns a list of all locks that are currently using the provided holiday calendar.",
        "operationId" : "getLocksByCalendarId",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LockPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/holiday-calendars/{holidayCalendarId}/slots" : {
      "post" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Adds a new holiday calendar slot to the holiday calendar.",
        "description" : "Creates and adds the holiday calendar slot to the provided holiday calendar and returns the updated holiday calendar object version. In case of a series definition in the given holiday calendar slot, more than one holiday calendar slots could be created. To retrieve the newly created slots from the returned calendar, they can be filtered based on given slot name.",
        "operationId" : "createHolidayCalendarSlot",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar with which the holiday calendar slot should be associated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holiday calendar slot to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HolidayCalendarSlotCreate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendar"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/holiday-calendars/{holidayCalendarId}/slots/{holidayCalendarSlotId}" : {
      "get" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Gets a specific holiday calendar slot.",
        "description" : "Returns information about a specific holiday calendar slot of the holiday calendar.",
        "operationId" : "getHolidayCalendarSlot",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar with which the holiday calendar slot is associated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "holidayCalendarSlotId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar slot",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendarSlot"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar slot not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Updates a holiday calendar slot of the holiday calendar.",
        "description" : "Updates the provided holiday calendar slot and returns the new holiday calendar object version.",
        "operationId" : "updateHolidayCalendarSlot",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar with which the holiday calendar slot is associated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "holidayCalendarSlotId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar slot to be updated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holiday calendar slot to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HolidayCalendarSlotUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendar"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar or slot not found"
          },
          "409" : {
            "description" : "Conflict - holiday calendar slot has been changed"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "holiday-calendars" ],
        "summary" : "Deletes provided holiday calendar slot.",
        "description" : "Deletes the provided holiday calendar slot and returns the new holiday calendar object version.",
        "operationId" : "deleteHolidayCalendarSlot",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "holidayCalendarId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar with which the holiday calendar slot is associated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "holidayCalendarSlotId",
          "in" : "path",
          "description" : "Unique identifier of the holiday calendar slot to be deleted",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Holiday calendar slot to be deleted",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/HolidayCalendarSlotDelete"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/HolidayCalendar"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, wrong data type supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Holiday calendar or slot not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/lock-protocol" : {
      "get" : {
        "tags" : [ "lock-protocol" ],
        "summary" : "Gets protocol of locks.",
        "description" : "Returns a list of protocols of all locks in the access control system.",
        "operationId" : "getLockProtocol",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "areaId",
          "in" : "query",
          "description" : "Filter protocols by area id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockId",
          "in" : "query",
          "description" : "Filter protocols by lock id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Timestamp from when the protocols need to be considered (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Timestamp until when the protocols need to be considered (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language codes as a comma-separated list of IETF (bcp47) language tags (e.g. de-DE, en-UK) or \"all\" for all possible languages used for translations",
          "required" : false,
          "type" : "string",
          "default" : "de-DE",
          "enum" : [ "cs-CZ", "de-DE", "en-UK", "es-ES", "fr-FR", "it-IT", "nl-NL", "pl-PL", "pt-PT", "sk-SL", "sv-SE", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LockProtocolPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/locks" : {
      "get" : {
        "tags" : [ "locks" ],
        "summary" : "Gets information of all locks.",
        "description" : "Returns a list of all locks with their information, sorted by lock id in ascending order. Maintenance tasks of a lock can be determined by using the maintenance-tasks resource (with lockId as query parameter for a single lock).",
        "operationId" : "getLocks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "calendarId",
          "in" : "query",
          "description" : "Filter locks by holiday calendar id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockingSystemId",
          "in" : "query",
          "description" : "Filter locks by technical identifier lockingSystemId",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LockPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/locks/{lockId}" : {
      "get" : {
        "tags" : [ "locks" ],
        "summary" : "Gets information of a specific lock.",
        "description" : "Returns a specific lock with its information.",
        "operationId" : "getLock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "lockId",
          "in" : "path",
          "description" : "Unique identifier of the lock",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Lock"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Lock not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "locks" ],
        "summary" : "Updates the provided lock.",
        "description" : "Updates the provided lock and returns the new version of the lock object.",
        "operationId" : "updateLock",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "lockId",
          "in" : "path",
          "description" : "Unique identifier of the lock",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Lock to be updated",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Lock"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Lock"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied, deserialization or validation errors)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Lock not found"
          },
          "409" : {
            "description" : "Lock updated by another client in the meantime"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/maintenance-tasks" : {
      "get" : {
        "tags" : [ "maintenance-tasks" ],
        "summary" : "Gets all maintenance tasks.",
        "description" : "Returns a list of all available maintenance tasks of the access control system, sorted by lockId in ascending order.",
        "operationId" : "getMaintenanceTasks",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "lockId",
          "in" : "query",
          "description" : "Filter maintenance tasks by lock id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockIdentifier",
          "in" : "query",
          "description" : "Filter maintenance tasks by lock identifier",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "doorName",
          "in" : "query",
          "description" : "Filter maintenance tasks by door name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MaintenanceTaskPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Gets information of all media.",
        "description" : "Returns a list of all media defined in the access control system, sorted by medium id in ascending order.",
        "operationId" : "getMedia",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personId",
          "in" : "query",
          "description" : "Filter media by person id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockingSystemId",
          "in" : "query",
          "description" : "Filter media by technical identifier lockingSystemId",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "assignmentStatus",
          "in" : "query",
          "description" : "Filter media by assignment status",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASSIGNED", "UNASSIGNED" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/MediumPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/assign" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Assigns a person to a medium for each provided assignment.",
        "description" : "Creates a person assignment for a medium according to the provided list of assignments and returns the resulting assignment list.",
        "operationId" : "assignOwnerToMedium",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of medium assignments",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/MediumAssignment"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/MediumAssignment"
              }
            }
          },
          "400" : {
            "description" : "Bad request (syntactically wrong / semantically wrong / cannot be fulfilled for other reasons, e.g., other business rules like the medium still has authorizations)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium or person not found"
          },
          "409" : {
            "description" : "Medium already assigned"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/cancel-assignment" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Cancels assignments of media.",
        "description" : "Cancels the person assignments of the provided list of media and returns a list of identifiers of the updated medium objects.",
        "operationId" : "cancelMediumAssignments",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of unique medium identifiers",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          },
          "400" : {
            "description" : "Bad request (syntactically wrong / semantically wrong / cannot be fulfilled for other reasons, e.g., other business rules like the medium still has authorizations)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/cards" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Gets information of all cards.",
        "description" : "Returns a list of all media of type 'card' defined in the access control system.",
        "operationId" : "getCards",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personId",
          "in" : "query",
          "description" : "Filter cards by person id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockingSystemId",
          "in" : "query",
          "description" : "Filter cards by technical identifier lockingSystemId",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "assignmentStatus",
          "in" : "query",
          "description" : "Filter cards by assignment status",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASSIGNED", "UNASSIGNED" ]
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/CardPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "media" ],
        "summary" : "Updates list of cards.",
        "description" : "Updates the provided list of cards and returns a list of new object versions.",
        "operationId" : "updateCards",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of cards to be updated",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Card"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Card"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Card not found"
          },
          "409" : {
            "description" : "Conflict - medium has been changed"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/cards/{cardId}" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Gets information of specific card.",
        "description" : "Returns all information of provided medium of type 'card'.",
        "operationId" : "getCard",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cardId",
          "in" : "path",
          "description" : "Unique identifier of the card",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Card"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/phones" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Gets information of all phones.",
        "description" : "Returns a list of all media of type 'phone' defined in the access control system.",
        "operationId" : "getPhones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personId",
          "in" : "query",
          "description" : "Filter phones by person id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockingSystemId",
          "in" : "query",
          "description" : "Filter phones by technical identifier lockingSystemId",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "assignmentStatus",
          "in" : "query",
          "description" : "Filter phones by assignment status",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASSIGNED", "UNASSIGNED" ]
        }, {
          "name" : "phoneNumber",
          "in" : "query",
          "description" : "Filter phones by phone number",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PhonePagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Adds list of new phones.",
        "description" : "Creates and adds the provided phones to the access control system and returns a list of the new phone objects. Please check before if a phone already exists with the given phone number to prevent duplicates.",
        "operationId" : "createPhones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of phones to be added",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PhoneCreate"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Phone"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "409" : {
            "description" : "Phone already exists"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "media" ],
        "summary" : "Updates list of phones.",
        "description" : "Updates the provided list of phones and returns a list of new object versions. Please check before if a phone already exists with the given phone number to prevent duplicates.",
        "operationId" : "updatePhones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of phones to be updated",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Phone"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Phone"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "409" : {
            "description" : "Conflict - medium has been changed"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "media" ],
        "summary" : "Deletes provided phones.",
        "description" : "Deletes the provided phones and returns a list of identifiers of all deleted objects.",
        "operationId" : "deletePhones",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of unique identifiers of all phones to be deleted",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g. wrong data type supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/phones/{phoneId}" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Gets information of specific phone.",
        "description" : "Returns all information of provided medium of type 'phone'.",
        "operationId" : "getPhone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Unique identifier of the phone",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Phone"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/phones/{phoneId}/pairing" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Generates a new pairing code for a phone.",
        "description" : "Generates a new pairing code for the provided phone and returns a new version of the phone object.",
        "operationId" : "generatePairingCodeForPhone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Unique identifier of the phone",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Phone"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/phones/{phoneId}/pin-reset" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Resets PIN of the phone.",
        "description" : "Resets the PIN of the provided phone and returns new version of the phone object with set PIN reset time. After the phone was synchronized the PIN flag is reset.",
        "operationId" : "resetPinOfPhone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Unique identifier of the phone to reset the PIN",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Phone"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "409" : {
            "description" : "No PIN set for phone"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/phones/{phoneId}/send-registration-code" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Sends pairing code to phone.",
        "description" : "Sends a generated pairing code per SMS to the phone and returns a new version of the phone object.",
        "operationId" : "sendRegistrationCodeToPhone_1",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Unique identifier of the phone",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Phone"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/phones/{phoneId}/send-registration-code-with-parameters" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Sends pairing code to phone while the SMS text to be sent can be configured.",
        "description" : "Sends a generated pairing code per SMS to the phone and returns a new version of the phone object.",
        "operationId" : "sendRegistrationCodeToPhone",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Unique identifier of the phone",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "Send registration code request wrapper",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SendRegistrationCodeRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Phone"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Phone not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/{mediumId}" : {
      "get" : {
        "tags" : [ "media" ],
        "summary" : "Gets information of a specific medium.",
        "description" : "Returns all information of a specific medium defined in the access control system.",
        "operationId" : "getMedium",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mediumId",
          "in" : "path",
          "description" : "Unique identifier of the medium",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Medium"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/{mediumId}/deactivate" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Deactivates provided medium.",
        "description" : "Deactivates the provided medium and returns a new version of the medium object. The fields \"reason\" and \"comment\" are saved in the system protocol and are not part of the response.",
        "operationId" : "deactivateMedium",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mediumId",
          "in" : "path",
          "description" : "Unique identifier of the medium to be deactivated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "Reason of deactivation (user defined input that can be used to describe the reasons for deactivating a medium, e.g. has been lost / was stolen / is broken)",
          "required" : true,
          "type" : "string",
          "maxLength" : 50,
          "minLength" : 1
        }, {
          "name" : "comment",
          "in" : "query",
          "description" : "Additional comment of deactivation (user defined input that can be used to add further details regarding the reason for deactivating a medium, e.g. when all details won't fit within the reason field)",
          "required" : false,
          "type" : "string",
          "maxLength" : 500,
          "minLength" : 0
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Medium"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/{mediumId}/empty" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Empties provided medium.",
        "description" : "Empties the provided medium and returns a new version of the medium object. All authorizations will be deleted from the medium. The person assignment of the medium does not get cancelled.",
        "operationId" : "emptyMedium",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mediumId",
          "in" : "path",
          "description" : "Unique identifier of the medium",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Medium"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/media/{mediumId}/reactivate" : {
      "post" : {
        "tags" : [ "media" ],
        "summary" : "Reactivates provided medium.",
        "description" : "Reactivates the provided medium and returns a new version of the medium object. The fields \"reason\" and \"comment\" are saved in the system protocol and are not part of the response.",
        "operationId" : "reactivateMedium",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "mediumId",
          "in" : "path",
          "description" : "Unique identifier of the medium to be reactivated",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "reason",
          "in" : "query",
          "description" : "Reason of reactivation (user defined input that can be used to describe the reasons for reactivating a medium, e.g. a medium has been found again)",
          "required" : true,
          "type" : "string",
          "maxLength" : 50,
          "minLength" : 1
        }, {
          "name" : "comment",
          "in" : "query",
          "description" : "Additional comment of reactivation (user defined input that can be used to add further details regarding the reason for reactivating a medium, e.g. when all details won't fit within the reason field)",
          "required" : false,
          "type" : "string",
          "maxLength" : 500,
          "minLength" : 0
        }, {
          "name" : "recoverAuthorizations",
          "in" : "query",
          "description" : "Recover authorizations available prior to deactivation",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Medium"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Medium not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/medium-protocol" : {
      "get" : {
        "tags" : [ "medium-protocol" ],
        "summary" : "Gets protocol of media.",
        "description" : "Returns a list of protocol of media in the access control system.",
        "operationId" : "getMediumProtocol",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Timestamp from when the protocols need to be considered (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Timestamp until when the protocol need to be considered (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "mediumId",
          "in" : "query",
          "description" : "Filter authorizations by medium id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language codes as a comma-separated list of IETF (bcp47) language tags (e.g. de-DE, en-UK) or \"all\" for all possible languages used for translations",
          "required" : false,
          "type" : "string",
          "default" : "de-DE",
          "enum" : [ "cs-CZ", "de-DE", "en-UK", "es-ES", "fr-FR", "it-IT", "nl-NL", "pl-PL", "pt-PT", "sk-SL", "sv-SE", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LockProtocolPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/persons" : {
      "get" : {
        "tags" : [ "persons" ],
        "summary" : "Gets all persons.",
        "description" : "Returns a list of all persons defined in the access control system, sorted by person id in ascending order.",
        "operationId" : "getPersons",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "firstName",
          "in" : "query",
          "description" : "Filter persons by first name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "lastName",
          "in" : "query",
          "description" : "Filter persons by last name",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "secondaryIdentification",
          "in" : "query",
          "description" : "Filter persons by secondary identification",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "search",
          "in" : "query",
          "description" : "Filter persons by matches in: first name, last name, secondary identification, email address, comment, street, city, country",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PersonPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "persons" ],
        "summary" : "Adds list of new persons.",
        "description" : "Creates and adds the provided persons to the access control system and returns a list of the new person objects.",
        "operationId" : "createPersons",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of persons to be added",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PersonCreate"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Person"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "persons" ],
        "summary" : "Updates list of persons.",
        "description" : "Updates the provided list of persons and returns a list of new object versions.",
        "operationId" : "updatePersons",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of persons to be updated",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Person"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Person"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., unknown attribute supplied, required attribute is missing, length or unique constraint violated)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Person not found"
          },
          "409" : {
            "description" : "Conflict - person has been changed"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "persons" ],
        "summary" : "Deletes provided persons.",
        "description" : "Deletes the provided persons and returns a list of identifiers of all deleted objects.",
        "operationId" : "deletePersons",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "List of unique identifiers of all persons to be deleted",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "integer",
                "format" : "int64"
              }
            }
          },
          "400" : {
            "description" : "Bad request (e.g., wrong data type supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Person not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/persons/{personId}" : {
      "get" : {
        "tags" : [ "persons" ],
        "summary" : "Gets a specific person.",
        "description" : "Returns a specific person defined in the access control system.",
        "operationId" : "getPerson",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Unique identifier of the person",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Person"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid ID supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Person not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/public-mgmt/reset-test-data" : {
      "post" : {
        "tags" : [ "public-mgmt" ],
        "summary" : "Resets test data in the integration environment.",
        "description" : "Resets the test data for the customer generated in the integration environment.",
        "operationId" : "resetTestData",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "responses" : {
          "204" : {
            "description" : "successful operation"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "404" : {
            "description" : "Customer data not found"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/send-a-key" : {
      "post" : {
        "tags" : [ "send-a-key" ],
        "summary" : "Sends a registration code to the phone and creates all necessary prerequisites if needed.",
        "description" : "Based on the given phone number this request sends a registration link via SMS for easy installation of the AirKey app. It simplifies the task of creating new mobile app users by implicitly creating new persons, phones and authorizations of type 'SIMPLE' if needed, i.e. it reuses an existing person if found. Please check before if a phone already exists with the given phone number to prevent duplicates (GET /media/phones using the filter phoneNumber). The reason why duplicates are allowed is to be able to create a new phone with an already existing phone number so it is not mandatory to delete an old phone before creating the new phone with the same phone number. <br/>Authorization creation mirrors the behaviour of POST /authorizations/simple. If you need more control consider creating a phone and person with this call and using the advanced authorization interface for creating authorizations. <br/>Either lockId or areaId needs to be set for an authorization. It's not possible to set both IDs at the same time.",
        "operationId" : "sendAKey",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Send-A-Key request wrapper",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/SendAKeyRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SendAKeyResponse"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., wrong data type supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    },
    "/v1/system-protocol" : {
      "get" : {
        "tags" : [ "system-protocol" ],
        "summary" : "Gets system protocol.",
        "description" : "Returns the system protocol with all events that were conducted by the administrators of the access control system.",
        "operationId" : "getSystemProtocol",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset for paging",
          "required" : false,
          "type" : "integer",
          "minimum" : 0
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit of result size",
          "required" : false,
          "type" : "integer",
          "minimum" : 1
        }, {
          "name" : "id",
          "in" : "query",
          "description" : "Filter events by unique protocol entry identifier",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "lockId",
          "in" : "query",
          "description" : "Filter events by unique lock id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "mediumId",
          "in" : "query",
          "description" : "Filter events by unique medium id",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "event",
          "in" : "query",
          "description" : "Filter events by event type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "userId",
          "in" : "query",
          "description" : "Filter events by unique administrator user identifier",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "administrator",
          "in" : "query",
          "description" : "Filter events by name of administrator",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "from",
          "in" : "query",
          "description" : "Timestamp from when the protocols need to be considered (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "to",
          "in" : "query",
          "description" : "Timestamp until when the protocol need to be considered (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "language",
          "in" : "query",
          "description" : "Language codes as a comma-separated list of IETF (bcp47) language tags (e.g. de-DE, en-UK) or \"all\" for all possible languages used for translations",
          "required" : false,
          "type" : "string",
          "default" : "de-DE",
          "enum" : [ "cs-CZ", "de-DE", "en-UK", "es-ES", "fr-FR", "it-IT", "nl-NL", "pl-PL", "pt-PT", "sk-SL", "sv-SE", "all" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SystemProtocolPagingList"
            }
          },
          "400" : {
            "description" : "Bad request (e.g., invalid filter or paging parameters supplied)"
          },
          "401" : {
            "description" : "Unauthorized (e.g., API key not found, not allowed due to IP whitelist)"
          },
          "429" : {
            "description" : "Too many requests - daily request limit exceeded"
          },
          "500" : {
            "description" : "Internal server error"
          },
          "503" : {
            "description" : "Service unavailable"
          }
        },
        "security" : [ {
          "X-API-Key" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "X-API-Key" : {
      "type" : "apiKey",
      "name" : "X-API-Key",
      "in" : "header"
    }
  },
  "definitions" : {
    "AppPairedEventDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EventDetails"
      }, {
        "type" : "object",
        "properties" : {
          "mediumId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the paired phone (medium)",
            "readOnly" : true
          }
        },
        "description" : "Model that describes details of an event where a phone was successfully paired."
      } ]
    },
    "Area" : {
      "type" : "object",
      "required" : [ "id", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the area",
          "readOnly" : true
        },
        "name" : {
          "type" : "string",
          "description" : "Area designation, (max. 50 characters)",
          "readOnly" : true,
          "minLength" : 1,
          "maxLength" : 50
        },
        "comment" : {
          "type" : "string",
          "description" : "Comment associated with the area",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 500
        },
        "lockList" : {
          "type" : "array",
          "description" : "List of locks that are assigned to the area",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Lock"
          }
        }
      },
      "description" : "Model that describes an area defined in the access control system."
    },
    "AreaPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "areaList" : {
          "type" : "array",
          "description" : "List of areas defined in the access control system",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Area"
          }
        }
      },
      "description" : "Model that describes a list of areas defined in the access control system used for paging."
    },
    "Authorization" : {
      "type" : "object",
      "required" : [ "authorizationInfoList", "id", "medium", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the authorization"
        },
        "medium" : {
          "description" : "Medium to which this authorization is defined",
          "$ref" : "#/definitions/SimpleMedium"
        },
        "lock" : {
          "description" : "Lock for which the medium is authorized",
          "$ref" : "#/definitions/SimpleLock"
        },
        "area" : {
          "description" : "Area for which the medium is authorized",
          "$ref" : "#/definitions/SimpleArea"
        },
        "personId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Owner of this authorization"
        },
        "currentState" : {
          "type" : "string",
          "description" : "Current state of authorization",
          "readOnly" : true,
          "enum" : [ "UNCHANGED", "MODIFIED", "CREATED", "DELETED", "CREATED_BLACKLISTED", "DEACTIVATED_RESTORABLE" ]
        },
        "createdOn" : {
          "type" : "string",
          "description" : "Timestamp when the authorization was created (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        },
        "updatedOn" : {
          "type" : "string",
          "description" : "Timestamp when the authorization was last updated (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        },
        "synchronizedOn" : {
          "type" : "string",
          "description" : "Timestamp when the authorization was last synchronized with the medium (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        },
        "deletionRequested" : {
          "type" : "boolean",
          "description" : "Is a deletion of the authorization requested or not",
          "readOnly" : true
        },
        "authorizationInfoList" : {
          "type" : "array",
          "description" : "List of authorization details",
          "items" : {
            "$ref" : "#/definitions/AuthorizationInfo"
          },
          "maxItems" : 8,
          "minItems" : 1
        },
        "custom" : {
          "type" : "boolean",
          "description" : "Authorization combines different authorization types",
          "readOnly" : true
        }
      },
      "description" : "Model that describes an authorization defined in the access control system (NOTE: Either the lock or the area is set, not both)."
    },
    "AuthorizationChange" : {
      "type" : "object",
      "required" : [ "authorizationCreateList", "authorizationUpdateList" ],
      "properties" : {
        "authorizationCreateList" : {
          "type" : "array",
          "description" : "List of medium authorizations to be created for the provided locks/areas",
          "items" : {
            "$ref" : "#/definitions/AuthorizationCreate"
          }
        },
        "authorizationUpdateList" : {
          "type" : "array",
          "description" : "List of medium authorizations to be updated",
          "items" : {
            "$ref" : "#/definitions/Authorization"
          }
        },
        "pushMessage" : {
          "type" : "string",
          "description" : "Notification text that will be shown on the phone for new/changed authorizations. Default text will be used if not set.",
          "minLength" : 0,
          "maxLength" : 160
        }
      },
      "description" : "Model that describes two lists of medium authorizations: one list with authorizations to be created in the access control system, the other list with authorizations to be updated."
    },
    "AuthorizationCreate" : {
      "type" : "object",
      "required" : [ "authorizationInfoList", "mediumId" ],
      "properties" : {
        "mediumId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Medium to which this authorization should be defined"
        },
        "areaId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Area for which the given medium should be authorized. Required when no lock id is set."
        },
        "lockId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Lock for which the given medium should be authorized. Required when no area id is set."
        },
        "authorizationInfoList" : {
          "type" : "array",
          "description" : "List of authorization details",
          "items" : {
            "$ref" : "#/definitions/AuthorizationInfo"
          },
          "maxItems" : 8,
          "minItems" : 1
        }
      },
      "description" : "Model that describes an authorization of a medium to be created in the access control system (NOTE: Either the lockId or the areaId must be set, not both)."
    },
    "AuthorizationDelete" : {
      "type" : "object",
      "required" : [ "deletionRequested", "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the authorization to be updated"
        },
        "deletionRequested" : {
          "type" : "boolean",
          "description" : "Is a deletion of the authorization requested (true) or should the deletion request be rolled back (false)"
        }
      },
      "description" : "Model that describes an authorization of a medium to be updated with regard to its status of deletion request."
    },
    "AuthorizationInfo" : {
      "type" : "object",
      "required" : [ "type" ],
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of authorization",
          "enum" : [ "PERMANENT", "PERIODICAL", "ONE_DAY", "SIMPLE" ]
        }
      },
      "description" : "Model that describes details of an authorization. Possible types of authorizations are: <br/><a href=\"#model-PermanentAuthorizationInfo\">PermanentAuthorizationInfo</a>: describes a permanent authorization with or without an expiration date (\"validFromDate\", \"validToDate\") <br/><a href=\"#model-PeriodicalAuthorizationInfo\">PeriodicalAuthorizationInfo</a>: describes an authorization with periodic access with or without an expiration date (\"periodicalPeriods\", \"validFromDate\", \"validToDate\") <br/><a href=\"#model-OneDayAuthorizationInfo\">OneDayAuthorizationInfo</a>: describes a temporary authorization for a day or a period of the day (\"validAtDate\", \"startTime\", \"endTime\") <br/><a href=\"#model-SimpleAuthorizationInfo\">SimpleAuthorizationInfo</a>: describes an authorization for basic needs, e.g., multi-day-capability, from-to with minute granularity, no gaps, no holiday calendar (\"validFrom\", \"validTo\")"
    },
    "AuthorizationPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "authorizations" : {
          "type" : "array",
          "description" : "List of authorizations of media",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Authorization"
          }
        }
      },
      "description" : "Model that describes a list of authorizations of media defined in the access control system used for paging."
    },
    "AuthorizationSyncDetails" : {
      "type" : "object",
      "properties" : {
        "authorizationId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique authorization identifier",
          "readOnly" : true
        },
        "syncAction" : {
          "type" : "string",
          "description" : "Type of sync action",
          "readOnly" : true,
          "enum" : [ "CREATED", "DELETED" ]
        }
      },
      "description" : "Model that describes synchronization details of an authorization."
    },
    "AuthorizationSynchronizedEventDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EventDetails"
      }, {
        "type" : "object",
        "properties" : {
          "mediumId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the synchronized medium",
            "readOnly" : true
          },
          "syncedAuthorizationList" : {
            "type" : "array",
            "description" : "List of synchronized authorizations",
            "readOnly" : true,
            "items" : {
              "$ref" : "#/definitions/AuthorizationSyncDetails"
            }
          }
        },
        "description" : "Model that describes details of an event where authorizations were synchronized."
      } ]
    },
    "BlacklistEntry" : {
      "type" : "object",
      "properties" : {
        "lockId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Lock for which the medium was added to the blacklist",
          "readOnly" : true
        },
        "mediumId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Medium which was added to the blacklist",
          "readOnly" : true
        },
        "synchronizedOnLock" : {
          "type" : "boolean",
          "description" : "Signals if the lock needs to be synchronized to consider this blacklist entry appropriately",
          "readOnly" : true
        }
      },
      "description" : "Model that describes an entry in a blacklist defined in the access control system."
    },
    "Card" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Medium"
      }, {
        "type" : "object",
        "properties" : {
          "mediumType" : {
            "type" : "string",
            "description" : "Card type of the medium",
            "readOnly" : true,
            "enum" : [ "CARD" ]
          },
          "cardUid" : {
            "type" : "string",
            "description" : "ISO/IEC 14443 UID of the card",
            "readOnly" : true,
            "minLength" : 0,
            "maxLength" : 20
          }
        },
        "description" : "Model that describes a card defined in the access control system."
      } ]
    },
    "CardPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "mediumList" : {
          "type" : "array",
          "description" : "List of cards",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Card"
          }
        }
      },
      "description" : "Model that describes a list of cards defined in the access control system used for paging."
    },
    "CreditInfo" : {
      "type" : "object",
      "properties" : {
        "temporalCreditEndOfValidity" : {
          "type" : "string",
          "description" : "Timestamp of temporal credit validity expiration (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        },
        "quantityCreditsAmount" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Available amount of credits",
          "readOnly" : true
        }
      },
      "description" : "Model that describes the information about available credits needed for modification of authorizations."
    },
    "Customer" : {
      "type" : "object",
      "properties" : {
        "accessControlSystemName" : {
          "type" : "string",
          "description" : "Name of the access control system",
          "readOnly" : true
        },
        "customerNumber" : {
          "type" : "string",
          "description" : "Customer number associated with the access control system",
          "readOnly" : true
        },
        "createdOn" : {
          "type" : "string",
          "description" : "Date when the customer was created (ISO 8601-format compliant date: yyyy-mm-dd)",
          "readOnly" : true
        },
        "contactTitle" : {
          "type" : "string",
          "description" : "Title of contact person",
          "readOnly" : true,
          "enum" : [ "MR", "MS" ]
        },
        "customerName" : {
          "type" : "string",
          "description" : "Name of customer (in case of a company it is the company name, otherwise the name of the private customer)",
          "readOnly" : true
        },
        "contactPerson" : {
          "type" : "string",
          "description" : "Contact person of the access control system",
          "readOnly" : true
        },
        "addressStreet" : {
          "type" : "string",
          "description" : "Street as part of the customer's address",
          "readOnly" : true
        },
        "addressPostCode" : {
          "type" : "string",
          "description" : "Postal code as part of the customer's address",
          "readOnly" : true
        },
        "addressCity" : {
          "type" : "string",
          "description" : "City as part of the customer's address",
          "readOnly" : true
        },
        "addressCountryCode" : {
          "type" : "string",
          "description" : "Country code as part of the customer's address (ISO 3166-1 alpha-3 format compliant)",
          "readOnly" : true,
          "enum" : [ "ABW", "AFG", "AGO", "AIA", "ALA", "ALB", "AND", "ANT", "ARE", "ARG", "ARM", "ASM", "ATA", "ATF", "ATG", "AUS", "AUT", "AZE", "BDI", "BEL", "BEN", "BES", "BFA", "BGD", "BGR", "BHR", "BHS", "BIH", "BLM", "BLR", "BLZ", "BMU", "BOL", "BRA", "BRB", "BRN", "BTN", "BVT", "BWA", "CAF", "CAN", "CCK", "CHE", "CHL", "CHN", "CIV", "CMR", "COD", "COG", "COK", "COL", "COM", "CPV", "CRI", "CUB", "CUW", "CXR", "CYM", "CYP", "CZE", "DEU", "DJI", "DMA", "DNK", "DOM", "DZA", "ECU", "EGY", "ERI", "ESH", "ESP", "EST", "ETH", "FIN", "FJI", "FLK", "FRA", "FRO", "FSM", "GAB", "GBR", "GEO", "GGY", "GHA", "GIB", "GIN", "GLP", "GMB", "GNB", "GNQ", "GRC", "GRD", "GRL", "GTM", "GUF", "GUM", "GUY", "HKG", "HMD", "HND", "HRV", "HTI", "HUN", "IDN", "IMN", "IND", "IOT", "IRL", "IRN", "IRQ", "ISL", "ISR", "ITA", "JAM", "JEY", "JOR", "JPN", "KAZ", "KEN", "KGZ", "KHM", "KIR", "KNA", "KOR", "KWT", "LAO", "LBN", "LBR", "LBY", "LCA", "LIE", "LKA", "LSO", "LTU", "LUX", "LVA", "MAC", "MAF", "MAR", "MCO", "MDA", "MDG", "MDV", "MEX", "MHL", "MKD", "MLI", "MLT", "MMR", "MNE", "MNG", "MNP", "MOZ", "MRT", "MSR", "MTQ", "MUS", "MWI", "MYS", "MYT", "NAM", "NCL", "NER", "NFK", "NGA", "NIC", "NIU", "NLD", "NOR", "NPL", "NRU", "NZL", "OMN", "PAK", "PAN", "PCN", "PER", "PHL", "PLW", "PNG", "POL", "PRI", "PRK", "PRT", "PRY", "PSE", "PYF", "QAT", "REU", "ROU", "RUS", "RWA", "SAU", "SCG", "SDN", "SEN", "SGP", "SGS", "SHN", "SJM", "SLB", "SLE", "SLV", "SMR", "SOM", "SPM", "SRB", "STP", "SUR", "SVK", "SVN", "SWE", "SWZ", "SXM", "SYC", "SYR", "TCA", "TCD", "TGO", "THA", "TJK", "TKL", "TKM", "TLS", "TON", "TTO", "TUN", "TUR", "TUV", "TWN", "TZA", "UGA", "UKR", "UMI", "URY", "USA", "UZB", "VAT", "VCT", "VEN", "VGB", "VIR", "VNM", "VUT", "WLF", "WSM", "YEM", "ZAF", "ZMB", "ZWE" ]
        },
        "contactPhoneNumber" : {
          "type" : "string",
          "description" : "Phone number for contact purpose",
          "readOnly" : true
        },
        "contactEmailAddress" : {
          "type" : "string",
          "description" : "Email address for contact purpose",
          "readOnly" : true
        },
        "fax" : {
          "type" : "string",
          "description" : "Fax for contact purpose",
          "readOnly" : true
        },
        "correspondenceLanguageCode" : {
          "type" : "string",
          "description" : "Language code for correspondences (IETF bcp47 format compliant)",
          "readOnly" : true,
          "enum" : [ "de-DE", "en-UK", "nl-NL", "sv-SE", "fr-FR", "it-IT", "es-ES", "pt-PT", "cs-CZ", "sk-SK", "pl-PL" ]
        }
      },
      "description" : "Model that describes data of a customer."
    },
    "Event" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "details" : {
          "description" : "Further event details (contextual event information, different for every event type)",
          "readOnly" : true,
          "$ref" : "#/definitions/EventDetails"
        },
        "timestamp" : {
          "type" : "string",
          "description" : "Event creation timestamp (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        }
      },
      "description" : "Model that describes an event in the access control system."
    },
    "EventDetails" : {
      "type" : "object",
      "discriminator" : "type",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of event",
          "readOnly" : true,
          "enum" : [ "UNLOCKING", "APP_PAIRED", "AUTHORIZATION_SYNCHRONIZED" ]
        }
      },
      "description" : "Model that describes further details of an event in the access control system (different for every event type). Possible types of event details are: <br/><a href=\"#model-AppPairedEventDetails\">AppPairedEventDetails</a>: describes an event where a phone was successfully paired (\"mediumId\")<br/><a href=\"#model-AuthorizationSynchronizedEventDetails\">AuthorizationSynchronizedEventDetails</a>: describes an event where authorizations were synchronized (\"mediumId\", \"syncedAuthorizationList\") <br/><a href=\"#model-UnlockingEventDetails\">UnlockingEventDetails<a/>: describes an event where a locking component was unlocked (\"lockId\", \"mediumId\", \"unlockingTimestamp\")"
    },
    "EventPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "events" : {
          "type" : "array",
          "description" : "List of events",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Event"
          }
        }
      },
      "description" : "Model that describes a list of events logged in the access control system used for paging."
    },
    "FixedMediumSimpleAuthorizationCreate" : {
      "type" : "object",
      "required" : [ "authorizationInfo" ],
      "properties" : {
        "authorizationInfo" : {
          "description" : "Simple authorization details",
          "$ref" : "#/definitions/SimpleAuthorizationInfo"
        },
        "lockId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Lock for which the medium should be authorized. Required when no area id is set."
        },
        "areaId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Area for which the medium should be authorized. Required when no lock id is set."
        },
        "removeAllExistingAuthorizationsForPair" : {
          "type" : "boolean",
          "description" : "Removes all authorizations for the given medium – lock or medium – area pair before creating the given simple authorization (avoids conflict potential which may result in failure)."
        }
      },
      "description" : "Model that is same as SimpleAuthorizationCreate, only with a fixed medium id (can’t be manually set, context dependant retrieval)."
    },
    "HolidayCalendar" : {
      "type" : "object",
      "required" : [ "active", "id", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the holiday calendar"
        },
        "active" : {
          "type" : "boolean",
          "description" : "Is the holiday calendar currently active or not"
        },
        "holidayCalendarSlots" : {
          "type" : "array",
          "description" : "List of holiday calendar slots defining the time of the holidays",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/HolidayCalendarSlot"
          },
          "maxItems" : 320,
          "minItems" : 0
        }
      },
      "description" : "Model that describes a holiday calendar defined in the access control system."
    },
    "HolidayCalendarList" : {
      "type" : "object",
      "properties" : {
        "holidayCalendarList" : {
          "type" : "array",
          "description" : "List of holiday calendars defined in the access control system",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/HolidayCalendar"
          }
        }
      },
      "description" : "Model that describes a list of holiday calendars defined in the access control system."
    },
    "HolidayCalendarSeries" : {
      "type" : "object",
      "required" : [ "id", "repetitionType" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "repetitionType" : {
          "type" : "string",
          "description" : "Type of the repetition",
          "enum" : [ "DAILY", "WEEKLY", "MONTHLY", "MONTHLY_SPECIFIC_WEEK_DAY", "YEARLY" ]
        },
        "endsAfter" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of repetitions"
        },
        "endsOn" : {
          "type" : "string",
          "description" : "Day until when the series is valid regardless of the time zone (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
        }
      },
      "description" : "Model that describes a repetitive series of holiday calendar slots defined in a holiday calendar."
    },
    "HolidayCalendarSeriesCreate" : {
      "type" : "object",
      "required" : [ "repetitionType" ],
      "properties" : {
        "repetitionType" : {
          "type" : "string",
          "description" : "Type of the repetition",
          "enum" : [ "DAILY", "WEEKLY", "MONTHLY", "MONTHLY_SPECIFIC_WEEK_DAY", "YEARLY" ]
        },
        "endsAfter" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Number of repetitions"
        },
        "endsOn" : {
          "type" : "string",
          "description" : "Day until when the series is valid (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
        }
      },
      "description" : "Model that describes a repetitive series of holiday calendar slots to be defined in a holiday calendar."
    },
    "HolidayCalendarSlot" : {
      "type" : "object",
      "required" : [ "id", "slotName", "validFrom", "validTo", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the holiday calendar slot",
          "readOnly" : true
        },
        "slotName" : {
          "type" : "string",
          "description" : "Name of the holiday calendar slot (max. 50 characters)",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 50
        },
        "validFrom" : {
          "type" : "string",
          "description" : "Holiday calendar slot start time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)",
          "readOnly" : true
        },
        "validTo" : {
          "type" : "string",
          "description" : "Holiday calendar slot end time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)",
          "readOnly" : true
        },
        "series" : {
          "description" : "Time series to which this holiday calendar slot is assigned to",
          "readOnly" : true,
          "$ref" : "#/definitions/HolidayCalendarSeries"
        },
        "seriesSequenceNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of this holiday calendar slot in the time series",
          "readOnly" : true
        }
      },
      "description" : "Model that describes a holiday calendar slot with identifier, version and a defined validity in a holiday calendar."
    },
    "HolidayCalendarSlotCreate" : {
      "type" : "object",
      "required" : [ "slotName", "validFrom", "validTo" ],
      "properties" : {
        "slotName" : {
          "type" : "string",
          "description" : "Name of the holiday calendar slot (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "validFrom" : {
          "type" : "string",
          "description" : "Holiday calendar slot start time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)"
        },
        "validTo" : {
          "type" : "string",
          "description" : "Holiday calendar slot end time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)"
        },
        "series" : {
          "description" : "Time series to which this holiday calendar slot is assigned to",
          "$ref" : "#/definitions/HolidayCalendarSeriesCreate"
        }
      },
      "description" : "Model that describes a holiday calendar slot to be defined in a holiday calendar."
    },
    "HolidayCalendarSlotDelete" : {
      "type" : "object",
      "required" : [ "deleteFutureSlots", "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the holiday calendar slot"
        },
        "slotName" : {
          "type" : "string",
          "description" : "Name of the holiday calendar slot",
          "readOnly" : true
        },
        "validFrom" : {
          "type" : "string",
          "description" : "Holiday calendar slot start time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)",
          "readOnly" : true
        },
        "validTo" : {
          "type" : "string",
          "description" : "Holiday calendar slot end time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)",
          "readOnly" : true
        },
        "series" : {
          "description" : "Time series to which this holiday calendar slot is assigned to",
          "readOnly" : true,
          "$ref" : "#/definitions/HolidayCalendarSeries"
        },
        "seriesSequenceNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of this holiday calendar slot in the time series",
          "readOnly" : true
        },
        "deleteFutureSlots" : {
          "type" : "boolean",
          "description" : "Deleting this holiday calendar slot only or also all future slots in the series"
        }
      },
      "description" : "Model that describes a holiday calendar slot with identifier  that should be deleted in a holiday calendar."
    },
    "HolidayCalendarSlotUpdate" : {
      "type" : "object",
      "required" : [ "id", "modifyFutureSlots", "slotName", "validFrom", "validTo", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the holiday calendar slot"
        },
        "slotName" : {
          "type" : "string",
          "description" : "Name of the holiday calendar slot (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "validFrom" : {
          "type" : "string",
          "description" : "Holiday calendar slot start time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)"
        },
        "validTo" : {
          "type" : "string",
          "description" : "Holiday calendar slot end time regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)"
        },
        "series" : {
          "description" : "Time series to which this holiday calendar slot is assigned to",
          "$ref" : "#/definitions/HolidayCalendarSeries"
        },
        "seriesSequenceNumber" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Sequence number of this holiday calendar slot in the time series",
          "readOnly" : true
        },
        "modifyFutureSlots" : {
          "type" : "boolean",
          "description" : "Updating this holiday calendar slot only or also all future slots in the series"
        }
      },
      "description" : "Model that describes a holiday calendar slot with identifier, version and a defined validity that should be updated in a holiday calendar."
    },
    "JsonNode" : {
      "type" : "object",
      "properties" : {
        "float" : {
          "type" : "boolean"
        },
        "nodeType" : {
          "type" : "string",
          "enum" : [ "ARRAY", "BINARY", "BOOLEAN", "MISSING", "NULL", "NUMBER", "OBJECT", "POJO", "STRING" ]
        },
        "number" : {
          "type" : "boolean"
        },
        "binary" : {
          "type" : "boolean"
        },
        "object" : {
          "type" : "boolean"
        },
        "boolean" : {
          "type" : "boolean"
        },
        "valueNode" : {
          "type" : "boolean"
        },
        "containerNode" : {
          "type" : "boolean"
        },
        "missingNode" : {
          "type" : "boolean"
        },
        "pojo" : {
          "type" : "boolean"
        },
        "integralNumber" : {
          "type" : "boolean"
        },
        "floatingPointNumber" : {
          "type" : "boolean"
        },
        "short" : {
          "type" : "boolean"
        },
        "int" : {
          "type" : "boolean"
        },
        "long" : {
          "type" : "boolean"
        },
        "double" : {
          "type" : "boolean"
        },
        "bigDecimal" : {
          "type" : "boolean"
        },
        "bigInteger" : {
          "type" : "boolean"
        },
        "textual" : {
          "type" : "boolean"
        },
        "array" : {
          "type" : "boolean"
        },
        "null" : {
          "type" : "boolean"
        }
      }
    },
    "Lock" : {
      "type" : "object",
      "required" : [ "id", "lockDoor", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the lock"
        },
        "lockType" : {
          "type" : "string",
          "description" : "Type of lock",
          "readOnly" : true,
          "enum" : [ "CYLINDER", "WALLREADER" ]
        },
        "lockTechnology" : {
          "type" : "string",
          "description" : "Type of lock technology",
          "readOnly" : true,
          "enum" : [ "NFC_ONLY", "NFC_AND_BLE" ]
        },
        "lockIdentifier" : {
          "type" : "string",
          "description" : "Identifier of the lock",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 16
        },
        "lockingSystemId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical identifier of the lock",
          "readOnly" : true
        },
        "lockDoor" : {
          "description" : "Door information associated with the lock",
          "$ref" : "#/definitions/LockDoor"
        },
        "lockFirmware" : {
          "description" : "Current firmware of the lock",
          "readOnly" : true,
          "$ref" : "#/definitions/LockFirmware"
        },
        "comment" : {
          "type" : "string",
          "description" : "Comment",
          "minLength" : 0,
          "maxLength" : 500
        }
      },
      "description" : "Model that describes a lock defined in the access control system."
    },
    "LockDoor" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of door",
          "minLength" : 0,
          "maxLength" : 50
        },
        "additionalInformation" : {
          "type" : "string",
          "description" : "Additional information about the door",
          "minLength" : 0,
          "maxLength" : 50
        },
        "location" : {
          "type" : "string",
          "description" : "Location of the door which could be an address or GPS coordinates",
          "minLength" : 0,
          "maxLength" : 250
        }
      },
      "description" : "Model that describes the door information associated with a lock."
    },
    "LockFirmware" : {
      "type" : "object",
      "properties" : {
        "appletVersion" : {
          "type" : "string",
          "description" : "Current version of applet",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 15
        },
        "picVersion" : {
          "type" : "string",
          "description" : "Current version of pic",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 15
        },
        "motorPicVersion" : {
          "type" : "string",
          "description" : "Current version of motor pic",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 15
        }
      },
      "description" : "Model that describes the firmware information of a lock."
    },
    "LockMaintenanceTask" : {
      "type" : "object",
      "properties" : {
        "lock" : {
          "description" : "Locking component with which the list of maintenance tasks is associated",
          "readOnly" : true,
          "$ref" : "#/definitions/SimpleLock"
        },
        "maintenanceTaskList" : {
          "type" : "array",
          "description" : "List of different available maintenance tasks",
          "readOnly" : true,
          "items" : {
            "type" : "string",
            "enum" : [ "EMPTY_BATTERY", "CHANGE_BATTERY", "BLACKLIST_NOT_SYNCHRONIZED", "CLOCK_INVALID", "AREAS_NOT_SYNCHRONIZED", "TIMEZONES_NOT_SYNCHRONIZED", "DELETE_CYLINDER", "DELETE_WALL_READER", "NEW_CYLINDER_FIRMWARE_AVAILABLE", "NEW_WALL_READER_FIRMWARE_AVAILABLE", "CYLINDER_AND_KNOB_REPLACEMENT", "CONTROL_AND_READER_UNIT_REPLACEMENT", "CYLINDER_AND_KNOB_REPLACEMENT_WITHOUT_INCOMPLETE", "CONTROL_AND_READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE", "KNOB_REPLACEMENT", "READER_UNIT_REPLACEMENT", "KNOB_REPLACEMENT_WITHOUT_INCOMPLETE", "READER_UNIT_REPLACEMENT_WITHOUT_INCOMPLETE", "KNOB_INSTALLATION", "READER_UNIT_INSTALLATION", "CYLINDER_AND_KNOB_INSTALLATION", "CONTROL_AND_READER_UNIT_INSTALLATION", "WHITELIST_NOT_SYNCHRONIZED", "CYLINDER_TEST_PENDING", "WALL_READER_TEST_PENDING", "REMOVE_DAMAGED_CYLINDER", "REMOVE_DAMAGED_WALL_READER", "UNBLOCKING_DURATION_NOT_SYNCHRONIZED", "PERMANENT_OPENING_SETTINGS_NOT_SYNCHRONIZED", "HOLIDAY_CALENDAR_NOT_SYNCHRONIZED", "RS485_OUTPUT_NOT_SYNCHRONIZED", "UNKNOWN" ]
          }
        }
      },
      "description" : "Model that describes a list of maintenance tasks for a specific locking component in the access control system."
    },
    "LockPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "lockList" : {
          "type" : "array",
          "description" : "List of locks",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Lock"
          }
        }
      },
      "description" : "Model that describes a list of locks defined in the access control system used for paging."
    },
    "LockProtocol" : {
      "type" : "object",
      "properties" : {
        "lock" : {
          "description" : "Lock with which this protocol entry is associated",
          "readOnly" : true,
          "$ref" : "#/definitions/SimpleLock"
        },
        "lockProtocol" : {
          "description" : "Protocol entry of a lock",
          "readOnly" : true,
          "$ref" : "#/definitions/LockProtocolEntry"
        }
      },
      "description" : "Model that describes a protocol entry associated with a lock defined in the access control system."
    },
    "LockProtocolDetails" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "description" : "Event details value fields",
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        },
        "translations" : {
          "type" : "object",
          "description" : "Event details translations comprising all requested languages (default only \"de-DE\")",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model that describes details of an event logged in the protocol associated with a lock defined in the access control system, e.g., what data were changed on a locking component/medium during an update. The details are presented in form of a short description of the event, which is translated to the requested languages (default only \"de-DE\"). The fields provide the actual values for most of the placeholders in the translation strings (prefixed with an @ symbol). The actual value for the \"@cylinderNumber\" placeholder is the \"lockIdentifier\" which is sent as part of the \"SimpleLock\" model. Since the actually used attributes vary between different events, the returned details usually only contain a subset of the following attributes:<br />\"areaCylinderAssignmentsSyncSuccessful\", \"authKeysSyncSuccessful\", \"batteryStatus\", \"blacklistSyncSuccessful\", \"capError\", \"capVersion\", \"comment\", \"cylinderClockInvalid\", \"cylinderNumber\", \"cylinderSharing\", \"cylinderType\", \"errorCode\", \"factoryStateAuthKeyRemoved\", \"factoryStateAuthKeyStored\", \"from\", \"holidayCalendarSyncSuccessful\", \"logSyncSuccessful\", \"mediumIdentifier\", \"motorPicVersion\", \"mPicError\", \"name\", \"newCylinderNumber\", \"number\", \"oldCylinderNumber\", \"operatorName\", \"permanentOpeningSettingsSyncSuccessful\", \"phone\", \"phoneNumber\", \"picError\", \"picVersion\", \"proxyMediumIdentifier\", \"reason\", \"success\", \"targetMediumIdentifier\", \"timeDeltaInSeconds\", \"timeReconstructedAfterPowerFailure\", \"timeSynchronized\", \"to\", \"unblockingDurationSyncSuccessful\", \"username\", \"whitelistSyncSuccessful\"<br />A returned \"proxyMediumIdentifier\" shows that a phone was used as device for executing this event and it provides this phone's identifier.<br />For example:<br /> \"details\": {<br />&nbsp;&nbsp; \"fields\": {<br />&nbsp;&nbsp;&nbsp;&nbsp; \"batteryStatus\": 100,<br />&nbsp;&nbsp;&nbsp;&nbsp; \"timeSynchronized\": {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"timeDeltaInSeconds\": 8,<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"success\": true<br />&nbsp;&nbsp;&nbsp;&nbsp; }<br />&nbsp;&nbsp; },<br />&nbsp;&nbsp; \"translations\": {<br />&nbsp;&nbsp;&nbsp;&nbsp; \"de-DE\": Schließkomponente aktualisiert: Uhrzeit aktualisiert (Zeitdifferenz: @timeDeltaInSeconds), Batterie: @batteryStatus).\"<br />&nbsp;&nbsp; }<br />}"
    },
    "LockProtocolEntry" : {
      "type" : "object",
      "properties" : {
        "eventCategory" : {
          "type" : "string",
          "description" : "Category of event",
          "readOnly" : true,
          "enum" : [ "BACKEND_EVENT", "LOCKING_EVENT", "PERMANENT_OPENING_MODE_EVENT", "SYNC_EVENT", "SYNC_BY_SUPPORT_EVENT", "DUMMY_EVENT" ]
        },
        "event" : {
          "description" : "Type of protocol entry event",
          "readOnly" : true,
          "$ref" : "#/definitions/LockProtocolEvent"
        },
        "details" : {
          "description" : "Details of the protocol entry event",
          "readOnly" : true,
          "$ref" : "#/definitions/LockProtocolDetails"
        },
        "lockUtcDelta" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Time difference of locking component regarding UTC",
          "readOnly" : true
        },
        "medium" : {
          "description" : "Medium which was used as source for this event",
          "readOnly" : true,
          "$ref" : "#/definitions/SimpleMedium"
        },
        "operatorName" : {
          "type" : "string",
          "description" : "Name of person who was responsible for this event",
          "readOnly" : true
        },
        "sourceLock" : {
          "type" : "boolean",
          "description" : "Locking component has verified event or not",
          "readOnly" : true
        },
        "sourceMedium" : {
          "type" : "boolean",
          "description" : "Medium has verified event or not",
          "readOnly" : true
        },
        "timestamp" : {
          "type" : "string",
          "description" : "Timestamp of the event (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        }
      },
      "description" : "Model that describes a protocol entry associated with a lock defined in the access control system."
    },
    "LockProtocolEvent" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of event",
          "readOnly" : true,
          "enum" : [ "UNLOCKING_SUCCESSFUL", "UNLOCKING_SUCCESSFUL_VIA_HANDS_FREE", "UNLOCKING_FAILED", "UNLOCKING_FAILED_BLACKLISTED", "UNLOCKING_FAILED_NOT_WHITELISTED", "UNLOCKING_FAILED_CYLINDER_TIME_OUT_OF_SYNC", "UNLOCKING_FAILED_AUTHORIZATION_SIGNATURE_INVALID", "UNLOCKING_FAILED_HOLIDAY_CALENDAR_ACTIVE", "CYLINDER_SYNCHRONIZATION_VIA_CARD_READER", "CYLINDER_SYNCHRONIZATION_VIA_CARD_READER_FAILED", "CYLINDER_SYNCHRONIZATION_VIA_OTA", "CYLINDER_SYNCHRONIZATION_VIA_OTA_FAILED", "CYLINDER_SYNCHRONIZATION_VIA_OTA_AFTER_UNLOCK", "CYLINDER_SYNCHRONIZATION_BY_SUPPORT", "CYLINDER_SYNCHRONIZATION_BY_SUPPORT_FAILED", "KEY_RING_SYNCHRONIZATION_VIA_CARD_READER", "KEY_RING_SYNCHRONIZATION_VIA_CARD_READER_FAILED", "KEY_RING_SYNCHRONIZATION_VIA_OTA", "KEY_RING_SYNCHRONIZATION_VIA_OTA_FAILED", "CREATE_MOBILE_PHONE", "DELETE_MOBILE_PHONE", "ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_CARD_READER", "ASSIGN_KEY_CARD_TO_CUSTOMER_VIA_OTA", "REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_CARD_READER", "REMOVE_KEY_CARD_FROM_CUSTOMER_VIA_OTA", "DEACTIVATION_INITIATED", "DEACTIVATION_COMPLETED", "DEACTIVATION_COMPLETED_BY_SUPPORT", "DEACTIVATION_COMPLETED_IMMEDIATELY", "REACTIVATION_INITIATED", "REACTIVATION_COMPLETED", "REACTIVATION_COMPLETED_BY_SUPPORT", "MOBILE_PHONE_PAIRING_FINALIZED", "MOBILE_PHONE_RE_PAIRING_FINALIZED", "KEYRING_CAP_FILE_UPDATED_VIA_CARD_READER", "KEYRING_CAP_FILE_UPDATED_VIA_OTA", "KEYRING_CAP_FILE_UPDATE_VIA_CARD_READER_FAILED", "KEYRING_CAP_FILE_UPDATE_VIA_OTA_FAILED", "PIN_PROTECTION_ACTIVATED", "PIN_PROTECTION_DEACTIVATED", "CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_CARD_READER", "CYLINDER_ASSIGNED_TO_CUSTOMER_VIA_OTA", "CYLINDER_REMOVED_FROM_CUSTOMER_VIA_CARD_READER", "CYLINDER_REMOVED_FROM_CUSTOMER_VIA_OTA", "SHARED_CYLINDER_CODE_REDEEMED", "CYLINDER_FIRMWARE_UPDATED_VIA_OTA", "CYLINDER_FIRMWARE_UPDATED_VIA_CARD_READER", "CYLINDER_FIRMWARE_UPDATED_BY_SUPPORT", "CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_OTA", "CYLINDER_FIRMWARE_UPDATED_PARTIALLY_VIA_CARD_READER", "CYLINDER_FIRMWARE_UPDATED_PARTIALLY_BY_SUPPORT", "CYLINDER_FIRMWARE_UPDATE_VIA_OTA_FAILED", "CYLINDER_FIRMWARE_UPDATE_VIA_CARD_READER_FAILED", "CYLINDER_FIRMWARE_UPDATE_FAILED_BY_SUPPORT", "CYLINDER_REPLACED_VIA_OTA", "CYLINDER_REPLACED_VIA_CARD_READER", "CYLINDER_REPLACEMENT_VIA_OTA_FAILED", "CYLINDER_REPLACEMENT_VIA_CARD_READER_FAILED", "CYLINDER_INSTALLED_VIA_OTA", "CYLINDER_INSTALLED_VIA_CARD_READER", "CYLINDER_INSTALLATION_VIA_OTA_FAILED", "CYLINDER_INSTALLATION_VIA_CARD_READER_FAILED", "KNOB_REPLACED_VIA_OTA", "KNOB_REPLACED_VIA_CARD_READER", "KNOB_REPLACEMENT_VIA_OTA_FAILED", "KNOB_REPLACEMENT_VIA_CARD_READER_FAILED", "KNOB_INSTALLED_VIA_OTA", "KNOB_INSTALLED_VIA_CARD_READER", "KNOB_INSTALLATION_VIA_OTA_FAILED", "KNOB_INSTALLATION_VIA_CARD_READER_FAILED", "REPLACEMENT_VIA_OTA_FAILED", "REPLACEMENT_VIA_CARD_READER_FAILED", "FAULTY_CYLINDER_REMOVED_VIA_APP", "FAULTY_CYLINDER_REMOVED_VIA_BROWSER", "FAULTY_CYLINDER_REMOVAL_VIA_APP_FAILED", "CYLINDER_SYNCHRONIZATION_AS_PROXY_APP", "CYLINDER_SYNCHRONIZATION_AS_PROXY_APP_FAILED", "KEY_RING_SYNCHRONIZATION_AS_PROXY_APP", "KEY_RING_SYNCHRONIZATION_AS_PROXY_APP_FAILED", "CYLINDER_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP", "KEY_CARD_ASSIGNED_TO_CUSTOMER_AS_PROXY_APP", "CYLINDER_REMOVED_FROM_CUSTOMER_AS_PROXY_APP", "KEY_CARD_REMOVED_FROM_CUSTOMER_AS_PROXY_APP", "MEDIUM_REMOVED_MANUALLY", "MEDIUM_MARKED_FOR_REMOVAL", "KEYRING_CAP_FILE_UPDATED_AS_PROXY_APP", "KEYRING_CAP_FILE_UPDATE_FAILED_AS_PROXY_APP", "CYLINDER_FIRMWARE_UPDATED_AS_PROXY_APP", "CYLINDER_FIRMWARE_UPDATED_PARTIALLY_AS_PROXY_APP", "CYLINDER_FIRMWARE_UPDATE_FAILED_AS_PROXY_APP", "CYLINDER_REPLACED_AS_PROXY_APP", "CYLINDER_REPLACEMENT_FAILED_AS_PROXY_APP", "CYLINDER_INSTALLED_AS_PROXY_APP", "CYLINDER_INSTALLATION_FAILED_AS_PROXY_APP", "KNOB_REPLACED_AS_PROXY_APP", "KNOB_REPLACEMENT_FAILED_AS_PROXY_APP", "KNOB_INSTALLED_AS_PROXY_APP", "KNOB_INSTALLATION_FAILED_AS_PROXY_APP", "REPLACEMENT_FAILED_AS_PROXY_APP", "FAULTY_CYLINDER_REMOVED_AS_PROXY_APP", "FAULTY_CYLINDER_REMOVAL_FAILED_AS_PROXY_APP", "DEACTIVATION_COMPLETED_AS_PROXY_APP", "REACTIVATION_COMPLETED_AS_PROXY_APP", "CYLINDER_LOG_OVERFLOW_POSSIBLE", "MANUAL_PERMANENT_OPENING_STARTED", "MANUAL_PERMANENT_OPENING_STOPPED_MANUALLY", "MANUAL_PERMANENT_OPENING_STOPPED_AUTOMATICALLY", "MANUAL_PERMANENT_OPENING_STOPPED_WEAK_BATTERY", "MANUAL_PERMANENT_OPENING_STOPPED_WRONG_TIME", "AUTOMATIC_PERMANENT_OPENING_STARTED", "AUTOMATIC_PERMANENT_OPENING_STOPPED_MANUALLY", "AUTOMATIC_PERMANENT_OPENING_STOPPED_AUTOMATICALLY", "AUTOMATIC_PERMANENT_OPENING_STOPPED_WEAK_BATTERY", "AUTOMATIC_PERMANENT_OPENING_STOPPED_WRONG_TIME", "AUTOMATIC_PERMANENT_OPENING_STOPPED_HOLIDAY_BEGIN", "UNKNOWN_PERMANENT_OPENING_ACTION", "MANUAL_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE", "AUTOMATIC_PERMANENT_OPENING_STOPPED_DUE_TO_FIRMWARE_UPDATE", "PRODUCTION_DUMMY_RECORD" ]
        },
        "translations" : {
          "type" : "object",
          "description" : "Event type translations comprising all requested languages (default only \"de-DE\")",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model that describes the type of a protocol entry event associated with a lock defined in the access control system."
    },
    "LockProtocolPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "lockProtocols" : {
          "type" : "array",
          "description" : "List of lock protocols",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/LockProtocol"
          }
        }
      },
      "description" : "Model that describes a list of lock protocols used for paging."
    },
    "MaintenanceTaskPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "lockMaintenanceTaskList" : {
          "type" : "array",
          "description" : "List of locking components and their associated maintenance tasks ",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/LockMaintenanceTask"
          }
        }
      },
      "description" : "Model that describes a list of locking components and their maintenance tasks defined in the access control system used for paging."
    },
    "Medium" : {
      "type" : "object",
      "required" : [ "id", "permanentOpeningEnabled", "releaseDurationExtended", "version" ],
      "discriminator" : "mediumType",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the medium"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the medium (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "mediumIdentifier" : {
          "type" : "string",
          "description" : "Identifier of the medium",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 16
        },
        "lockingSystemId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Technical identifier of the medium",
          "readOnly" : true
        },
        "mediumType" : {
          "type" : "string",
          "description" : "Type of the medium",
          "readOnly" : true,
          "enum" : [ "PHONE", "CARD" ]
        },
        "lastSynchronizedOn" : {
          "type" : "string",
          "description" : "Timestamp of the last synchronization (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 24
        },
        "comment" : {
          "type" : "string",
          "description" : "Comment (max. 500 characters)",
          "minLength" : 0,
          "maxLength" : 500
        },
        "releaseDurationExtended" : {
          "type" : "boolean",
          "description" : "Release duration is extended or not"
        },
        "permanentOpeningEnabled" : {
          "type" : "boolean",
          "description" : "Permanent opening is enabled or not"
        },
        "activated" : {
          "type" : "boolean",
          "description" : "Activated or not",
          "readOnly" : true
        },
        "personId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Person this medium is assigned to"
        }
      },
      "description" : "Model that describes a medium defined in the access control system. Possible types of media are: <br/><a href=\"#model-Phone\">Phone</a>: describes a phone (\"appType\", \"platformVersion\", \"phoneSettings\", \"pairingCode\", \"pairingCodeValidUntil\", \"phoneNumber\", \"sentKeyOn\") <br/><a href=\"#model-Card\">Card</a>: describes a card "
    },
    "MediumAssignment" : {
      "type" : "object",
      "required" : [ "mediumId", "personId" ],
      "properties" : {
        "mediumId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifier of the medium"
        },
        "personId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Identifier of the person"
        }
      },
      "description" : "Model that describes an assignment of a medium to a person in an access control system."
    },
    "MediumPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "mediumList" : {
          "type" : "array",
          "description" : "List of media",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Medium"
          }
        }
      },
      "description" : "Model that describes a list of media defined in the access control system used for paging."
    },
    "OneDayAuthorizationInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthorizationInfo"
      }, {
        "type" : "object",
        "required" : [ "type", "validAtDate" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "One day type of authorization",
            "enum" : [ "ONE_DAY" ]
          },
          "validAtDate" : {
            "type" : "string",
            "description" : "Date when the authorization is valid regardless of the time zone (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
          },
          "startTime" : {
            "type" : "string",
            "description" : "Starting time on the day specified by validAtDate, not necessary when the authorization should be valid for the whole day (format: hh:mm)"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Ending time on the day specified by validAtDate, max value: 24:00, not necessary when authorization should be valid for the whole day (format: hh:mm)"
          }
        },
        "description" : "Model that describes details of a one day authorization."
      } ]
    },
    "PeriodicalAuthorizationInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthorizationInfo"
      }, {
        "type" : "object",
        "required" : [ "periodicalPeriods", "type", "validFromDate" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Periodical type of authorization",
            "enum" : [ "PERIODICAL" ]
          },
          "periodicalPeriods" : {
            "type" : "array",
            "description" : "List of periodical periods in which the medium is authorized for a lock or area (max. 28 entries - 4 per week day)",
            "items" : {
              "$ref" : "#/definitions/PeriodicalPeriod"
            },
            "maxItems" : 28,
            "minItems" : 1
          },
          "validFromDate" : {
            "type" : "string",
            "description" : "Date from when the authorization is valid regardless of the time zone (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
          },
          "validToDate" : {
            "type" : "string",
            "description" : "Date until when the authorization is valid regardless of the time zone, not necessary if there should be no limit (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
          }
        },
        "description" : "Model that describes details of a periodical authorization."
      } ]
    },
    "PeriodicalPeriod" : {
      "type" : "object",
      "required" : [ "endTime", "startTime", "weekday" ],
      "properties" : {
        "weekday" : {
          "type" : "string",
          "description" : "Day of the week",
          "enum" : [ "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY" ]
        },
        "startTime" : {
          "type" : "string",
          "description" : "Starting time (format: hh:mm)"
        },
        "endTime" : {
          "type" : "string",
          "description" : "Ending time (format: hh:mm)"
        }
      },
      "description" : "Model that describes a periodical period defined in an authorization."
    },
    "PermanentAuthorizationInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthorizationInfo"
      }, {
        "type" : "object",
        "required" : [ "type" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Permanent type of authorization",
            "enum" : [ "PERMANENT" ]
          },
          "validFromDate" : {
            "type" : "string",
            "description" : "Date from when the authorization is valid regardless of the time zone, not necessary if it should always be valid (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
          },
          "validToDate" : {
            "type" : "string",
            "description" : "Date until when the authorization is valid regardless of the time zone, not necessary if it should always be valid (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
          }
        },
        "description" : "Model that describes details of a permanent authorization."
      } ]
    },
    "Person" : {
      "type" : "object",
      "required" : [ "correspondenceLanguageCode", "firstName", "id", "lastName", "version" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "version" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Current version number of the person"
        },
        "firstName" : {
          "type" : "string",
          "description" : "First name of the person (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "lastName" : {
          "type" : "string",
          "description" : "Last name of the person (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "secondaryIdentification" : {
          "type" : "string",
          "description" : "Secondary identification of the person (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "gender" : {
          "type" : "string",
          "description" : "Gender of the person",
          "enum" : [ "MALE", "FEMALE" ]
        },
        "birthday" : {
          "type" : "string",
          "description" : "Birthday (ISO 8601-format compliant date without time zone: yyyy-mm-dd)",
          "minLength" : 0,
          "maxLength" : 10
        },
        "phone" : {
          "type" : "string",
          "description" : "Phone number (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "Email address (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "street" : {
          "type" : "string",
          "description" : "Street (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "postalCode" : {
          "type" : "string",
          "description" : "Postal code (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 10
        },
        "countryCode" : {
          "type" : "string",
          "description" : "Country code, ISO 3166-1 alpha-3 compliant and case sensitive (ONLY the defined ISO codes are accepted)",
          "minLength" : 0,
          "maxLength" : 3,
          "enum" : [ "ABW", "AFG", "AGO", "AIA", "ALA", "ALB", "AND", "ANT", "ARE", "ARG", "ARM", "ASM", "ATA", "ATF", "ATG", "AUS", "AUT", "AZE", "BDI", "BEL", "BEN", "BES", "BFA", "BGD", "BGR", "BHR", "BHS", "BIH", "BLM", "BLR", "BLZ", "BMU", "BOL", "BRA", "BRB", "BRN", "BTN", "BVT", "BWA", "CAF", "CAN", "CCK", "CHE", "CHL", "CHN", "CIV", "CMR", "COD", "COG", "COK", "COL", "COM", "CPV", "CRI", "CUB", "CUW", "CXR", "CYM", "CYP", "CZE", "DEU", "DJI", "DMA", "DNK", "DOM", "DZA", "ECU", "EGY", "ERI", "ESH", "ESP", "EST", "ETH", "FIN", "FJI", "FLK", "FRA", "FRO", "FSM", "GAB", "GBR", "GEO", "GGY", "GHA", "GIB", "GIN", "GLP", "GMB", "GNB", "GNQ", "GRC", "GRD", "GRL", "GTM", "GUF", "GUM", "GUY", "HKG", "HMD", "HND", "HRV", "HTI", "HUN", "IDN", "IMN", "IND", "IOT", "IRL", "IRN", "IRQ", "ISL", "ISR", "ITA", "JAM", "JEY", "JOR", "JPN", "KAZ", "KEN", "KGZ", "KHM", "KIR", "KNA", "KOR", "KWT", "LAO", "LBN", "LBR", "LBY", "LCA", "LIE", "LKA", "LSO", "LTU", "LUX", "LVA", "MAC", "MAF", "MAR", "MCO", "MDA", "MDG", "MDV", "MEX", "MHL", "MKD", "MLI", "MLT", "MMR", "MNE", "MNG", "MNP", "MOZ", "MRT", "MSR", "MTQ", "MUS", "MWI", "MYS", "MYT", "NAM", "NCL", "NER", "NFK", "NGA", "NIC", "NIU", "NLD", "NOR", "NPL", "NRU", "NZL", "OMN", "PAK", "PAN", "PCN", "PER", "PHL", "PLW", "PNG", "POL", "PRI", "PRK", "PRT", "PRY", "PSE", "PYF", "QAT", "REU", "ROU", "RUS", "RWA", "SAU", "SCG", "SDN", "SEN", "SGP", "SGS", "SHN", "SJM", "SLB", "SLE", "SLV", "SMR", "SOM", "SPM", "SRB", "STP", "SUR", "SVK", "SVN", "SWE", "SWZ", "SXM", "SYC", "SYR", "TCA", "TCD", "TGO", "THA", "TJK", "TKL", "TKM", "TLS", "TON", "TTO", "TUN", "TUR", "TUV", "TWN", "TZA", "UGA", "UKR", "UMI", "URY", "USA", "UZB", "VAT", "VCT", "VEN", "VGB", "VIR", "VNM", "VUT", "WLF", "WSM", "YEM", "ZAF", "ZMB", "ZWE" ]
        },
        "city" : {
          "type" : "string",
          "description" : "City (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "comment" : {
          "type" : "string",
          "description" : "Comment (max. 500 characters)",
          "minLength" : 0,
          "maxLength" : 500
        },
        "correspondenceLanguageCode" : {
          "type" : "string",
          "description" : "Language code for correspondences, IETF bcp47 compliant and case sensitive (ONLY the 11 defined language tags are accepted)",
          "minLength" : 0,
          "maxLength" : 5,
          "enum" : [ "de-DE", "en-UK", "nl-NL", "sv-SE", "fr-FR", "it-IT", "es-ES", "pt-PT", "cs-CZ", "sk-SK", "pl-PL" ]
        }
      },
      "description" : "Model that describes a stored person with identifier and version defined in the access control system."
    },
    "PersonCreate" : {
      "type" : "object",
      "required" : [ "correspondenceLanguageCode", "firstName", "lastName" ],
      "properties" : {
        "firstName" : {
          "type" : "string",
          "description" : "First name of the person (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "lastName" : {
          "type" : "string",
          "description" : "Last name of the person (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "secondaryIdentification" : {
          "type" : "string",
          "description" : "Secondary identification of the person (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "gender" : {
          "type" : "string",
          "description" : "Gender of the person",
          "enum" : [ "MALE", "FEMALE" ]
        },
        "birthday" : {
          "type" : "string",
          "description" : "Birthday (ISO 8601-format compliant date without time zone: yyyy-mm-dd)"
        },
        "phone" : {
          "type" : "string",
          "description" : "Phone number (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "emailAddress" : {
          "type" : "string",
          "description" : "Email address (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "street" : {
          "type" : "string",
          "description" : "Street (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "postalCode" : {
          "type" : "string",
          "description" : "Postal code (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 10
        },
        "countryCode" : {
          "type" : "string",
          "description" : "Country code, ISO 3166-1 alpha-3 compliant and case sensitive (ONLY the defined ISO codes are accepted)",
          "minLength" : 0,
          "maxLength" : 3,
          "enum" : [ "ABW", "AFG", "AGO", "AIA", "ALA", "ALB", "AND", "ANT", "ARE", "ARG", "ARM", "ASM", "ATA", "ATF", "ATG", "AUS", "AUT", "AZE", "BDI", "BEL", "BEN", "BES", "BFA", "BGD", "BGR", "BHR", "BHS", "BIH", "BLM", "BLR", "BLZ", "BMU", "BOL", "BRA", "BRB", "BRN", "BTN", "BVT", "BWA", "CAF", "CAN", "CCK", "CHE", "CHL", "CHN", "CIV", "CMR", "COD", "COG", "COK", "COL", "COM", "CPV", "CRI", "CUB", "CUW", "CXR", "CYM", "CYP", "CZE", "DEU", "DJI", "DMA", "DNK", "DOM", "DZA", "ECU", "EGY", "ERI", "ESH", "ESP", "EST", "ETH", "FIN", "FJI", "FLK", "FRA", "FRO", "FSM", "GAB", "GBR", "GEO", "GGY", "GHA", "GIB", "GIN", "GLP", "GMB", "GNB", "GNQ", "GRC", "GRD", "GRL", "GTM", "GUF", "GUM", "GUY", "HKG", "HMD", "HND", "HRV", "HTI", "HUN", "IDN", "IMN", "IND", "IOT", "IRL", "IRN", "IRQ", "ISL", "ISR", "ITA", "JAM", "JEY", "JOR", "JPN", "KAZ", "KEN", "KGZ", "KHM", "KIR", "KNA", "KOR", "KWT", "LAO", "LBN", "LBR", "LBY", "LCA", "LIE", "LKA", "LSO", "LTU", "LUX", "LVA", "MAC", "MAF", "MAR", "MCO", "MDA", "MDG", "MDV", "MEX", "MHL", "MKD", "MLI", "MLT", "MMR", "MNE", "MNG", "MNP", "MOZ", "MRT", "MSR", "MTQ", "MUS", "MWI", "MYS", "MYT", "NAM", "NCL", "NER", "NFK", "NGA", "NIC", "NIU", "NLD", "NOR", "NPL", "NRU", "NZL", "OMN", "PAK", "PAN", "PCN", "PER", "PHL", "PLW", "PNG", "POL", "PRI", "PRK", "PRT", "PRY", "PSE", "PYF", "QAT", "REU", "ROU", "RUS", "RWA", "SAU", "SCG", "SDN", "SEN", "SGP", "SGS", "SHN", "SJM", "SLB", "SLE", "SLV", "SMR", "SOM", "SPM", "SRB", "STP", "SUR", "SVK", "SVN", "SWE", "SWZ", "SXM", "SYC", "SYR", "TCA", "TCD", "TGO", "THA", "TJK", "TKL", "TKM", "TLS", "TON", "TTO", "TUN", "TUR", "TUV", "TWN", "TZA", "UGA", "UKR", "UMI", "URY", "USA", "UZB", "VAT", "VCT", "VEN", "VGB", "VIR", "VNM", "VUT", "WLF", "WSM", "YEM", "ZAF", "ZMB", "ZWE" ]
        },
        "city" : {
          "type" : "string",
          "description" : "City (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        },
        "comment" : {
          "type" : "string",
          "description" : "Comment (max. 500 characters)",
          "minLength" : 0,
          "maxLength" : 500
        },
        "correspondenceLanguageCode" : {
          "type" : "string",
          "description" : "Language code for correspondences, IETF bcp47 compliant and case sensitive (ONLY the 11 defined language tags are accepted)",
          "minLength" : 0,
          "maxLength" : 5,
          "enum" : [ "de-DE", "en-UK", "nl-NL", "sv-SE", "fr-FR", "it-IT", "es-ES", "pt-PT", "cs-CZ", "sk-SK", "pl-PL" ]
        }
      },
      "description" : "Model that describes a person to be defined in the access control system."
    },
    "PersonPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "personList" : {
          "type" : "array",
          "description" : "List of persons",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Person"
          }
        }
      },
      "description" : "Model that describes a list of persons defined in the access control system used for paging."
    },
    "Phone" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Medium"
      }, {
        "type" : "object",
        "required" : [ "phoneNumber", "phoneSettings" ],
        "properties" : {
          "mediumType" : {
            "type" : "string",
            "description" : "Phone type of the medium",
            "readOnly" : true,
            "enum" : [ "PHONE" ]
          },
          "appType" : {
            "type" : "string",
            "description" : "Type of the used app",
            "readOnly" : true,
            "minLength" : 0,
            "maxLength" : 50,
            "enum" : [ "ANDROID", "BLACKBERRY", "IPHONE", "WINDOWS_PHONE" ]
          },
          "platformVersion" : {
            "type" : "string",
            "description" : "Current version of the platform",
            "readOnly" : true,
            "minLength" : 0,
            "maxLength" : 50
          },
          "phoneSettings" : {
            "description" : "Settings of the phone",
            "$ref" : "#/definitions/PhoneSettings"
          },
          "pairingCode" : {
            "type" : "string",
            "description" : "Generated pairing code",
            "readOnly" : true,
            "minLength" : 0,
            "maxLength" : 12
          },
          "pairingCodeValidUntil" : {
            "type" : "string",
            "description" : "Timestamp until when the pairing code is valid (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)",
            "readOnly" : true,
            "minLength" : 0,
            "maxLength" : 24
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number of the phone starting with '+' followed by 1-49 digits (incl. possible spaces), e.g. +436641234567",
            "minLength" : 1,
            "maxLength" : 50,
            "pattern" : "^[\\+]([0-9 ]){1,49}$"
          },
          "sentKeyOn" : {
            "type" : "string",
            "description" : "Timestamp when the pairing code was sent to the phone (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)",
            "readOnly" : true,
            "minLength" : 0,
            "maxLength" : 24
          }
        },
        "description" : "Model that describes a phone defined in the access control system."
      } ]
    },
    "PhoneCreate" : {
      "type" : "object",
      "required" : [ "phoneNumber" ],
      "properties" : {
        "phoneNumber" : {
          "type" : "string",
          "description" : "Phone number of the phone to be created starting with '+' followed by 1-49 digits (incl. possible spaces), e.g. +436641234567)",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "^[\\+]([0-9 ]){1,49}$"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the phone to be created (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        }
      },
      "description" : "Model that describes a phone to be defined in an access control system."
    },
    "PhonePagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "mediumList" : {
          "type" : "array",
          "description" : "List of phones",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/Phone"
          }
        }
      },
      "description" : "Model that describes a list of phones defined in the access control system used for paging."
    },
    "PhoneSettings" : {
      "type" : "object",
      "required" : [ "inMaintenanceMode", "mediumLogVisible" ],
      "properties" : {
        "inMaintenanceMode" : {
          "type" : "boolean",
          "description" : "In maintenance mode or not"
        },
        "mediumLogVisible" : {
          "type" : "boolean",
          "description" : "Log of the medium is visible or not"
        },
        "pinSet" : {
          "type" : "boolean",
          "description" : "Pin is set or not",
          "readOnly" : true
        },
        "pinResetTime" : {
          "type" : "string",
          "description" : "Timestamp of PIN reset (ISO 8601-format compliant date with time in UTC, milliseconds precision: yyyy-mm-ddThh:mm:ss.SSSZ)",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 24
        }
      },
      "description" : "Model that describes the settings of a phone defined in the access control system."
    },
    "SendAKeyPhone" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique id of the phone for using an existing one"
        },
        "phoneNumber" : {
          "type" : "string",
          "description" : "Phone number of the phone to be created starting with '+' followed by 1-49 digits (incl. possible spaces), e.g. +436641234567)",
          "minLength" : 1,
          "maxLength" : 50,
          "pattern" : "^[\\+]([0-9 ]){1,49}$"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the phone to be created (max. 50 characters)",
          "minLength" : 0,
          "maxLength" : 50
        }
      },
      "description" : "Model that describes a phone to be defined in an access control system."
    },
    "SendAKeyRequest" : {
      "type" : "object",
      "required" : [ "phone" ],
      "properties" : {
        "phone" : {
          "description" : "Phone to create / use",
          "$ref" : "#/definitions/SendAKeyPhone"
        },
        "person" : {
          "description" : "Person to create / use (the search filter criteria of a person use: 'firstName', 'lastName', and 'secondaryIdentification')",
          "$ref" : "#/definitions/PersonCreate"
        },
        "authorization" : {
          "description" : "Authorization to create / use",
          "$ref" : "#/definitions/FixedMediumSimpleAuthorizationCreate"
        },
        "smsText" : {
          "type" : "string",
          "description" : "SMS text. Default text will be used if not set.",
          "minLength" : 0,
          "maxLength" : 150
        }
      },
      "description" : "Model that describes a send-a-key request."
    },
    "SendAKeyResponse" : {
      "type" : "object",
      "properties" : {
        "phone" : {
          "description" : "Phone (either looked up by the requested one or the created one)",
          "readOnly" : true,
          "$ref" : "#/definitions/Phone"
        },
        "person" : {
          "description" : "Same as in request, supplemented with default data / existing data and id",
          "readOnly" : true,
          "$ref" : "#/definitions/Person"
        },
        "authorization" : {
          "description" : "Created/existing authorization",
          "readOnly" : true,
          "$ref" : "#/definitions/Authorization"
        }
      },
      "description" : "Model used for send-a-key responses."
    },
    "SendRegistrationCodeRequest" : {
      "type" : "object",
      "properties" : {
        "smsText" : {
          "type" : "string",
          "description" : "SMS text. Default text will be used if not set.",
          "minLength" : 0,
          "maxLength" : 150
        }
      },
      "description" : "Model that describes a send registration code request."
    },
    "SimpleArea" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "Area designation",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 50
        },
        "comment" : {
          "type" : "string",
          "description" : "Comment associated with the area",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 500
        }
      },
      "description" : "Model that describes an area in a simple form defined in the access control system."
    },
    "SimpleAuthorizationCreate" : {
      "type" : "object",
      "required" : [ "authorizationInfo", "mediumId" ],
      "properties" : {
        "authorizationInfo" : {
          "description" : "Details of a simple authorization",
          "$ref" : "#/definitions/SimpleAuthorizationInfo"
        },
        "mediumId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Medium to which this authorization should be defined"
        },
        "lockId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Lock for which the medium should be authorized. Required when no area id is set."
        },
        "areaId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Area for which the medium should be authorized. Required when no lock id is set."
        },
        "removeAllExistingAuthorizationsForPair" : {
          "type" : "boolean",
          "description" : "Removes all authorizations for the given medium – lock or medium – area pair before creating the given simple authorization (avoids conflict potential which may result in failure)."
        },
        "pushMessage" : {
          "type" : "string",
          "description" : "Notification text that will be shown on the phone for new/changed authorizations. Default text will be used if not set.",
          "minLength" : 0,
          "maxLength" : 160
        }
      },
      "description" : "Model that describes a simple authorization of a medium to be created in the access control system."
    },
    "SimpleAuthorizationInfo" : {
      "allOf" : [ {
        "$ref" : "#/definitions/AuthorizationInfo"
      }, {
        "type" : "object",
        "required" : [ "type", "validFrom", "validTo" ],
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Simple type of authorization",
            "enum" : [ "SIMPLE" ]
          },
          "validFrom" : {
            "type" : "string",
            "description" : "Date from when the authorization is valid regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)"
          },
          "validTo" : {
            "type" : "string",
            "description" : "Date until when the authorization is valid regardless of the time zone (ISO 8601-format compliant date with time, without time zone: yyyy-mm-ddThh:mm)"
          }
        },
        "description" : "Model that describes details of an authorization for basic needs (multi-day-capability, from-to with minute granularity, no gaps, no holiday calendar)."
      } ]
    },
    "SimpleLock" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "lockType" : {
          "type" : "string",
          "description" : "Type of lock",
          "readOnly" : true,
          "enum" : [ "CYLINDER", "WALLREADER" ]
        },
        "lockIdentifier" : {
          "type" : "string",
          "description" : "Identifier of the lock",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 16
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the lock",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 50
        },
        "additionalInformation" : {
          "type" : "string",
          "description" : "Additional information about the lock",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 50
        }
      },
      "description" : "Model that describes a lock in a simple form defined in the access control system."
    },
    "SimpleMedium" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "name" : {
          "type" : "string",
          "description" : "Name of the medium",
          "minLength" : 0,
          "maxLength" : 50
        },
        "mediumIdentifier" : {
          "type" : "string",
          "description" : "Medium identifier",
          "readOnly" : true,
          "minLength" : 0,
          "maxLength" : 16
        },
        "mediumType" : {
          "type" : "string",
          "description" : "Type of medium",
          "readOnly" : true,
          "enum" : [ "PHONE", "CARD" ]
        }
      },
      "description" : "Model that describes a medium in a simple form defined in the access control system."
    },
    "SystemProtocol" : {
      "type" : "object",
      "properties" : {
        "administratorName" : {
          "type" : "string",
          "description" : "Name of the administrator who was responsible for this event",
          "readOnly" : true
        },
        "userId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier of the administrator who was responsible for this event",
          "readOnly" : true
        },
        "systemProtocolEntry" : {
          "description" : "System protocol entry with event details",
          "readOnly" : true,
          "$ref" : "#/definitions/SystemProtocolEntry"
        }
      },
      "description" : "Model that describes a system protocol entry in the access control system."
    },
    "SystemProtocolDetails" : {
      "type" : "object",
      "properties" : {
        "fields" : {
          "description" : "Event details value fields using a JSON structure",
          "readOnly" : true,
          "$ref" : "#/definitions/JsonNode"
        },
        "translations" : {
          "type" : "object",
          "description" : "Event details translations comprising all requested languages (default only \"de-DE\")",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model that describes details of an event logged in the system protocol of an access control system, e.g., what activity was performed on which locking component/medium and what data were changed on a locking component/medium during an update. The details are presented in form of a short description of the event, which is translated to the requested languages (default only \"de-DE\"). The fields provide the actual values for the placeholders in the translation strings (prefixed with an @ symbol). Since the actually used attributes vary between different activities, the returned details usually only contain a subset of the following attributes:<br />\"aco\", \"amount\", \"activated\", \"area\", \"authorizations\", \"capError\", \"capVersion\", \"city\", \"clientId\", \"code\", \"comment\", \"companyName\", \"costActivation\", country\", \"customer\", \"cylinderNumber\", \"cylinderType\", \"deactivationComment\", \"details\", \"doorAdditionalInformation\", \"doorName\", \"email\", \"emailNotificationInveral\", \"endOfValidity\", \"endOfValidityAfter\", \"endTime\", \"fax\", \"firstname\", \"isCustom\", \"isKeyRingLogVisible\", \"JavaCardAppletVersion\", \"language\", \"lastname\", \"lockingSystemName\", \"mediumIdentifier\", \"mediumType\", \"model\", \"motorPicVersion\", \"mPicError\", \"name\", \"newEndOfValidity\", \"newValue\", \"notesEmailNotification\", \"number\", \"oldValue\", \"operatorName\", \"packageVersion\", \"phone\", \"phoneNumber\", \"period\", \"picError\", \"picVersion\", \"proxyMediumIdentifier\", \"reactivationComment\", \"reason\", \"reasonForDeactivating\", \"reasonForReactivating\", \"requestsPerDay\", \"startTime\", \"street\", \"subcomponent\", \"title\", \"translationKey\", \"tyAfter\", \"type\", \"updateEmailNotification\", \"user\", \"username\", \"validFrom\", \"validTo\", \"zip\"<br />For example:<br /> \"details\": {<br />&nbsp;&nbsp; \"fields\": {<br />&nbsp;&nbsp;&nbsp;&nbsp; \"name\": \"phone 1\",<br />&nbsp;&nbsp;&nbsp;&nbsp; \"mediumType\": \"MOBILE_PHONE\",\n&nbsp;&nbsp;&nbsp;&nbsp; \"details\": {<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \"isInMaintenanceMode\": true <br />&nbsp;&nbsp;&nbsp;&nbsp; },<br />&nbsp;&nbsp;&nbsp;&nbsp; \"phoneNumber\": \"+43123456789\",<br />&nbsp;&nbsp;&nbsp;&nbsp; \"mediumIdentifier\": \"01A2B3C4D5E6F7G8H\"<br />&nbsp;&nbsp; },<br />&nbsp;&nbsp; \"translations\": {<br />&nbsp;&nbsp;&nbsp;&nbsp; \"de-DE\": \"@mediumType \\\"@mediumIdentifier\\\"#{ (@name)}#{ @phoneNumber} wurde erfolgreich bearbeitet.\"<br />&nbsp;&nbsp; }<br />}"
    },
    "SystemProtocolEntry" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique identifier"
        },
        "event" : {
          "description" : "Type of system protocol entry event",
          "readOnly" : true,
          "$ref" : "#/definitions/SystemProtocolEvent"
        },
        "details" : {
          "description" : "Details of the system protocol entry event",
          "readOnly" : true,
          "$ref" : "#/definitions/SystemProtocolDetails"
        },
        "timestamp" : {
          "type" : "string",
          "description" : "Timestamp of the event (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
          "readOnly" : true
        },
        "lockIdentifier" : {
          "type" : "string",
          "description" : "Identifier of the locking component which was involved in the event, otherwise empty if no locking component was involved",
          "readOnly" : true
        },
        "lockId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique id of the locking component which was involved in the event if it still exists in the access control system, otherwise empty",
          "readOnly" : true
        },
        "mediumIdentifier" : {
          "type" : "string",
          "description" : "Identifier of the medium which was involved in the event, otherwise empty if no medium was involved, ",
          "readOnly" : true
        },
        "mediumId" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Unique id of the medium which was involved in the event if it still exists in the access control system, otherwise empty",
          "readOnly" : true
        }
      },
      "description" : "Model that describes a protocol entry of an event that was conducted by an administrator in the access control system."
    },
    "SystemProtocolEvent" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "description" : "Type of event",
          "readOnly" : true,
          "enum" : [ "CREATE_KEYRING", "EDIT_CYLINDER", "EDIT_KEYRING", "CHANGE_KEYRING_OWNER", "REVOKE_KEYRING_OWNER", "CREATE_AUTHORIZATION_KEY", "EDIT_AUTHORIZATION_KEY", "DELETE_AUTHORIZATION_KEY_IN_STATE_CREATE", "MARK_AUTHORIZATION_KEY_AS_DELETED", "UNDELETE_AUTHORIZATION_KEY", "CREATE_PERSON", "EDIT_PERSON", "DELETE_PERSON", "CREATE_AREA", "EDIT_AREA", "DELETE_AREA", "ASSIGN_CYLINDER_TO_AREA", "ASSIGN_AREA_TO_CYLINDER", "UNASSIGN_CYLINDER_FROM_AREA", "UNASSIGN_AREA_FROM_CYLINDER", "QUANTITY_CREDIT_ADDED", "TEMPORAL_CREDIT_ADDED", "INVALID_CREDIT_ENTERED", "CREDIT_REDEEMING_LOCKED", "AUTH_KEY_PRODUCTION_FINISHED", "GENERATE_MOBILE_PHONE_PAIRING_CODE", "GENERATE_MOBILE_PHONE_RE_PAIRING_CODE", "FINALIZE_MOBILE_PHONE_PAIRING", "FINALIZE_MOBILE_PHONE_RE_PAIRING", "MEDIUM_EMPTIED", "CREATE_TIMEZONE", "EDIT_TIMEZONE", "EDIT_TIMEZONE_NEW_DEFAULT", "CREATE_DAYLIGHT_SAVING_ENTRIES", "EDIT_DAYLIGHT_SAVING_ENTRIES", "CREATE_ACO", "EDIT_ACO", "DELETE_ACO", "CREATE_ACO_FINISHED", "ASSIGN_KEY_CARD_TO_CUSTOMER_SUCCESS", "ASSIGN_CYLINDER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS", "ASSIGN_CYLINDER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS", "ASSIGN_CYLINDER_TO_CUSTOMER_FAILURE", "ASSIGN_KEY_CARD_TO_CUSTOMER_FAILURE", "INITIATE_REMOVE_CYLINDER_FROM_CUSTOMER", "FINALIZE_REMOVE_CYLINDER_FROM_CUSTOMER", "REMOVE_CYLINDER_FROM_CUSTOMER_FAILED", "REMOVE_KEYRING_FROM_CUSTOMER_FAILED", "INITIATE_REMOVE_KEYRING_FROM_CUSTOMER", "FINALIZE_REMOVE_MOBILE_PHONE_FROM_CUSTOMER", "FINALIZE_REMOVE_KEY_CARD_FROM_CUSTOMER", "EDIT_CUSTOMER_SETTINGS", "REACTIVATE_KEYRING_INITIATED", "REACTIVATE_KEYRING_FINISHED", "REACTIVATE_KEYRING_FINISHED_BY_SUPPORT", "DEACTIVATE_KEYRING_INITIATED", "DEACTIVATE_KEYRING_FINISHED", "DEACTIVATE_KEYRING_FINISHED_BY_SUPPORT", "PASSWORD_RESET", "ADD_SUPPORT_ACO", "DELETE_SUPPORT_ACO", "CREATE_SHARED_CYLINDER_CODE", "REDEEM_SHARED_CYLINDER_CODE_OWNER", "REDEEM_SHARED_CYLINDER_CODE", "REMOVE_EXPIRED_ACO_ACTIVATION", "PIN_RESET_INITIATED", "PIN_RESET_FINISHED", "SINGLE_LOCKING_SYSTEM_LOG_DELETED", "ALL_LOCKING_SYSTEM_LOGS_OF_A_PERSON_DELETED", "UNSHARE_CYLINDER", "REPLACEMENT_CYLINDER_CREATED", "REPLACEMENT_KNOB_CREATED", "REPLACEMENT_CYLINDER_INSTALLED", "REPLACEMENT_KNOB_INSTALLED", "REPLACEMENT_CYLINDER_FAILED", "REPLACEMENT_KNOB_FAILED", "EDIT_DEFAULT_LOG_SETTINGS", "CYLINDER_DEFAULTS_EDITED", "DELETE_MAINTENANCE_WINDOW", "EDIT_MAINTENANCE_WINDOW", "CREATE_MAINTENANCE_WINDOW", "ACKNOWLEDGE_MAINTENANCE_WINDOW", "VIEW_LOG", "REMOVE_KEYRING_AFTER_COMPLETE_DEACTIVATION", "MEDIUM_REMOVED_MANUALLY", "MEDIUM_MARKED_FOR_REMOVAL", "REMOVE_DAMAGED_CYLINDER", "REMOVE_DAMAGED_CYLINDER_FAILED", "EDIT_WALLREADER", "ASSIGN_WALLREADER_TO_CUSTOMER_VIA_CARD_READER_SUCCESS", "ASSIGN_WALLREADER_TO_CUSTOMER_VIA_MOBILE_PHONE_SUCCESS", "ASSIGN_WALLREADER_TO_CUSTOMER_FAILURE", "INITIATE_REMOVE_WALLREADER_FROM_CUSTOMER", "FINALIZE_REMOVE_WALLREADER_FROM_CUSTOMER", "REMOVE_WALLREADER_FROM_CUSTOMER_FAILED", "REPLACEMENT_WALLREADER_CREATED", "REPLACEMENT_READER_UNIT_CREATED", "REPLACEMENT_WALLREADER_INSTALLED", "REPLACEMENT_READER_UNIT_INSTALLED", "REPLACEMENT_WALLREADER_FAILED", "REPLACEMENT_READER_UNIT_FAILED", "REMOVE_DAMAGED_WALLREADER", "REMOVE_DAMAGED_WALLREADER_FAILED", "ISSUE_RECEIPT_EXPORTED", "MAINTENANCE_MAIL_DISCONTINUED", "QUICK_REGISTRY_SMS_SENT", "EXPORT_AREAS", "EXPORT_LOCKING_PLAN", "EXPORT_KEYRINGS", "EXPORT_OWN_KEYRINGS", "EXPORT_FOREIGN_KEYRINGS", "EXPORT_LOCKING_COMPONENTS", "ACOS_EXPORTED", "HANDS_FREE_MODE_ACTIVATED", "HANDS_FREE_MODE_DEACTIVATED", "EXPORT_PERSONS", "KEYRING_PROTOCOL_EXPORTED", "LOCKING_COMPONENT_PROTOCOL_EXPORTED", "JOURNAL_EXPORTED", "DEACTIVATE_HOLIDAYS", "REACTIVATE_HOLIDAYS", "CREATE_HOLIDAY", "DELETE_HOLIDAY_SINGLE", "DELETE_HOLIDAY_SERIES_SINGLE", "DELETE_HOLIDAY_SERIES_MULTIPLE", "EDIT_HOLIDAY_SINGLE", "EDIT_HOLIDAY_SERIES_SINGLE", "EDIT_HOLIDAY_SERIES_MULTIPLE", "UNLOCK_FROM_LOCK_SCREEN_ACTIVATED", "UNLOCK_FROM_LOCK_SCREEN_DEACTIVATED" ]
        },
        "translations" : {
          "type" : "object",
          "description" : "Event type translations comprising all requested languages (default only \"de-DE\")",
          "readOnly" : true,
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : "Model that describes the type of a system protocol entry event defined in the access control system."
    },
    "SystemProtocolPagingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Offset for paging",
          "readOnly" : true
        },
        "total" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Total size of result set",
          "readOnly" : true
        },
        "systemProtocolList" : {
          "type" : "array",
          "description" : "List of system protocols",
          "readOnly" : true,
          "items" : {
            "$ref" : "#/definitions/SystemProtocol"
          }
        }
      },
      "description" : "Model that describes a list of system protocols used for paging."
    },
    "UnlockingEventDetails" : {
      "allOf" : [ {
        "$ref" : "#/definitions/EventDetails"
      }, {
        "type" : "object",
        "properties" : {
          "lockId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the unlocked locking component",
            "readOnly" : true
          },
          "mediumId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the medium which was used to unlock the locking component. Not set for anonymized events.",
            "readOnly" : true
          },
          "unlockingTimestamp" : {
            "type" : "string",
            "description" : "Unlocking timestamp, usually different than the event (server) timestamp (ISO 8601-format compliant date with time in UTC, milliseconds precision)",
            "readOnly" : true
          }
        },
        "description" : "Model that describes details of an event where a locking component was unlocked."
      } ]
    }
  }
}